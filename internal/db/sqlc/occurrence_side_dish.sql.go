// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: occurrence_side_dish.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

type AddMultipleOccurrenceSideDishesParams struct {
	Occurrence uuid.UUID `json:"occurrence"`
	Dish       uuid.UUID `json:"dish"`
}

const addOccurrenceSideDish = `-- name: AddOccurrenceSideDish :one
INSERT INTO occurrence_side_dishes (occurrence, dish)
VALUES ($1, $2)
RETURNING occurrence, dish
`

type AddOccurrenceSideDishParams struct {
	Occurrence uuid.UUID `json:"occurrence"`
	Dish       uuid.UUID `json:"dish"`
}

func (q *Queries) AddOccurrenceSideDish(ctx context.Context, arg *AddOccurrenceSideDishParams) (*OccurrenceSideDish, error) {
	row := q.db.QueryRow(ctx, addOccurrenceSideDish, arg.Occurrence, arg.Dish)
	var i OccurrenceSideDish
	err := row.Scan(&i.Occurrence, &i.Dish)
	return &i, err
}

const removeOccurrenceSideDish = `-- name: RemoveOccurrenceSideDish :one
DELETE FROM occurrence_side_dishes
WHERE occurrence = $1 AND dish = $2
RETURNING occurrence, dish
`

type RemoveOccurrenceSideDishParams struct {
	Occurrence uuid.UUID `json:"occurrence"`
	Dish       uuid.UUID `json:"dish"`
}

func (q *Queries) RemoveOccurrenceSideDish(ctx context.Context, arg *RemoveOccurrenceSideDishParams) (*OccurrenceSideDish, error) {
	row := q.db.QueryRow(ctx, removeOccurrenceSideDish, arg.Occurrence, arg.Dish)
	var i OccurrenceSideDish
	err := row.Scan(&i.Occurrence, &i.Dish)
	return &i, err
}
