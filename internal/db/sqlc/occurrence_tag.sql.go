// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: occurrence_tag.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

type AddMultipleOccurrenceTagsParams struct {
	Occurrence uuid.UUID `json:"occurrence"`
	Tag        string    `json:"tag"`
}

const addOccurrenceTag = `-- name: AddOccurrenceTag :one
INSERT INTO occurrence_tag (occurrence, tag)
VALUES ($1, $2)
RETURNING occurrence, tag
`

type AddOccurrenceTagParams struct {
	Occurrence uuid.UUID `json:"occurrence"`
	Tag        string    `json:"tag"`
}

func (q *Queries) AddOccurrenceTag(ctx context.Context, arg *AddOccurrenceTagParams) (*OccurrenceTag, error) {
	row := q.db.QueryRow(ctx, addOccurrenceTag, arg.Occurrence, arg.Tag)
	var i OccurrenceTag
	err := row.Scan(&i.Occurrence, &i.Tag)
	return &i, err
}

const removeOccurrenceTag = `-- name: RemoveOccurrenceTag :one
DELETE FROM occurrence_tag
WHERE occurrence = $1 AND tag = $2
RETURNING occurrence, tag
`

type RemoveOccurrenceTagParams struct {
	Occurrence uuid.UUID `json:"occurrence"`
	Tag        string    `json:"tag"`
}

func (q *Queries) RemoveOccurrenceTag(ctx context.Context, arg *RemoveOccurrenceTagParams) (*OccurrenceTag, error) {
	row := q.db.QueryRow(ctx, removeOccurrenceTag, arg.Occurrence, arg.Tag)
	var i OccurrenceTag
	err := row.Scan(&i.Occurrence, &i.Tag)
	return &i, err
}
