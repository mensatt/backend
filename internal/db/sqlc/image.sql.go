// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: image.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const addImageToReview = `-- name: AddImageToReview :one
INSERT INTO image (review, image_hash)
VALUES ($1, $2)
RETURNING id, image_hash, review
`

type AddImageToReviewParams struct {
	Review    uuid.UUID `json:"review"`
	ImageHash string    `json:"image_hash"`
}

func (q *Queries) AddImageToReview(ctx context.Context, arg *AddImageToReviewParams) (*Image, error) {
	row := q.db.QueryRow(ctx, addImageToReview, arg.Review, arg.ImageHash)
	var i Image
	err := row.Scan(&i.ID, &i.ImageHash, &i.Review)
	return &i, err
}

type AddMultipleImagesToReviewParams struct {
	Review    uuid.UUID `json:"review"`
	ImageHash string    `json:"image_hash"`
}

const deleteImage = `-- name: DeleteImage :one
DELETE FROM image
WHERE id = $1
RETURNING id, image_hash, review
`

func (q *Queries) DeleteImage(ctx context.Context, id uuid.UUID) (*Image, error) {
	row := q.db.QueryRow(ctx, deleteImage, id)
	var i Image
	err := row.Scan(&i.ID, &i.ImageHash, &i.Review)
	return &i, err
}

const getAllImages = `-- name: GetAllImages :many
SELECT id, image_hash, review
FROM image
`

func (q *Queries) GetAllImages(ctx context.Context) ([]*Image, error) {
	rows, err := q.db.Query(ctx, getAllImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(&i.ID, &i.ImageHash, &i.Review); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImageByID = `-- name: GetImageByID :one
SELECT id, image_hash, review
FROM image
WHERE id = $1
`

func (q *Queries) GetImageByID(ctx context.Context, id uuid.UUID) (*Image, error) {
	row := q.db.QueryRow(ctx, getImageByID, id)
	var i Image
	err := row.Scan(&i.ID, &i.ImageHash, &i.Review)
	return &i, err
}

const getImageHashByID = `-- name: GetImageHashByID :one
SELECT image_hash
FROM image
WHERE id = $1
`

func (q *Queries) GetImageHashByID(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getImageHashByID, id)
	var image_hash string
	err := row.Scan(&image_hash)
	return image_hash, err
}

const getImagesByDish = `-- name: GetImagesByDish :many
SELECT image.id, image.image_hash, image.review
FROM image
JOIN review ON (image.review = review.id)
JOIN occurrence ON (review.occurrence = occurrence.id)
JOIN dish ON (occurrence.dish = dish.id)
WHERE dish.id = $1
`

func (q *Queries) GetImagesByDish(ctx context.Context, id uuid.UUID) ([]*Image, error) {
	rows, err := q.db.Query(ctx, getImagesByDish, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(&i.ID, &i.ImageHash, &i.Review); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesByOccurrence = `-- name: GetImagesByOccurrence :many
SELECT image.id, image.image_hash, image.review
FROM image
JOIN review ON (image.review = review.id)
JOIN occurrence ON (review.occurrence = occurrence.id)
WHERE occurrence.id = $1
`

func (q *Queries) GetImagesByOccurrence(ctx context.Context, id uuid.UUID) ([]*Image, error) {
	rows, err := q.db.Query(ctx, getImagesByOccurrence, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(&i.ID, &i.ImageHash, &i.Review); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesByReview = `-- name: GetImagesByReview :many
SELECT image.id, image.image_hash, image.review
FROM image JOIN review ON (image.review = review.id)
WHERE review.id = $1
`

func (q *Queries) GetImagesByReview(ctx context.Context, id uuid.UUID) ([]*Image, error) {
	rows, err := q.db.Query(ctx, getImagesByReview, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(&i.ID, &i.ImageHash, &i.Review); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
