// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type OccurrenceStatus string

const (
	OccurrenceStatusCONFIRMED        OccurrenceStatus = "CONFIRMED"
	OccurrenceStatusAPPROVED         OccurrenceStatus = "APPROVED"
	OccurrenceStatusAWAITINGAPPROVAL OccurrenceStatus = "AWAITING_APPROVAL"
	OccurrenceStatusUPDATED          OccurrenceStatus = "UPDATED"
	OccurrenceStatusPENDINGDELETION  OccurrenceStatus = "PENDING_DELETION"
)

func (e *OccurrenceStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OccurrenceStatus(s)
	case string:
		*e = OccurrenceStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OccurrenceStatus: %T", src)
	}
	return nil
}

type NullOccurrenceStatus struct {
	OccurrenceStatus OccurrenceStatus
	Valid            bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOccurrenceStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OccurrenceStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OccurrenceStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOccurrenceStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.OccurrenceStatus, nil
}

type Priority string

const (
	PriorityHIDE   Priority = "HIDE"
	PriorityLOW    Priority = "LOW"
	PriorityMEDIUM Priority = "MEDIUM"
	PriorityHIGH   Priority = "HIGH"
)

func (e *Priority) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Priority(s)
	case string:
		*e = Priority(s)
	default:
		return fmt.Errorf("unsupported scan type for Priority: %T", src)
	}
	return nil
}

type NullPriority struct {
	Priority Priority
	Valid    bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPriority) Scan(value interface{}) error {
	if value == nil {
		ns.Priority, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Priority.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPriority) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Priority, nil
}

type Dish struct {
	ID     uuid.UUID      `json:"id"`
	NameDe string         `json:"name_de"`
	NameEn sql.NullString `json:"name_en"`
}

type DishAlias struct {
	AliasName           string    `json:"alias_name"`
	NormalizedAliasName string    `json:"normalized_alias_name"`
	Dish                uuid.UUID `json:"dish"`
}

type Image struct {
	ID           uuid.UUID `json:"id"`
	ImageStoreID string    `json:"image_store_id"`
	Review       uuid.UUID `json:"review"`
}

type Location struct {
	ID         uuid.UUID `json:"id"`
	ExternalID int32     `json:"external_id"`
	Name       string    `json:"name"`
}

type Occurrence struct {
	ID            uuid.UUID        `json:"id"`
	Location      uuid.UUID        `json:"location"`
	Dish          uuid.UUID        `json:"dish"`
	Date          time.Time        `json:"date"`
	Status        OccurrenceStatus `json:"status"`
	Kj            sql.NullInt32    `json:"kj"`
	Kcal          sql.NullInt32    `json:"kcal"`
	Fat           sql.NullInt32    `json:"fat"`
	SaturatedFat  sql.NullInt32    `json:"saturated_fat"`
	Carbohydrates sql.NullInt32    `json:"carbohydrates"`
	Sugar         sql.NullInt32    `json:"sugar"`
	Fiber         sql.NullInt32    `json:"fiber"`
	Protein       sql.NullInt32    `json:"protein"`
	Salt          sql.NullInt32    `json:"salt"`
	PriceStudent  sql.NullInt32    `json:"price_student"`
	PriceStaff    sql.NullInt32    `json:"price_staff"`
	PriceGuest    sql.NullInt32    `json:"price_guest"`
}

type OccurrenceSideDish struct {
	Occurrence uuid.UUID `json:"occurrence"`
	Dish       uuid.UUID `json:"dish"`
}

type OccurrenceTag struct {
	Occurrence uuid.UUID `json:"occurrence"`
	Tag        string    `json:"tag"`
}

type Review struct {
	ID          uuid.UUID      `json:"id"`
	Occurrence  uuid.UUID      `json:"occurrence"`
	DisplayName sql.NullString `json:"display_name"`
	Stars       int32          `json:"stars"`
	Text        sql.NullString `json:"text"`
	UpVotes     int32          `json:"up_votes"`
	DownVotes   int32          `json:"down_votes"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	AcceptedAt  sql.NullTime   `json:"accepted_at"`
}

type Tag struct {
	Key         string         `json:"key"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	ShortName   sql.NullString `json:"short_name"`
	Priority    Priority       `json:"priority"`
	IsAllergy   bool           `json:"is_allergy"`
}

type User struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}
