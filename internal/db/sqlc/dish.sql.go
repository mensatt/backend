// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: dish.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createDish = `-- name: CreateDish :one
INSERT INTO dish (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateDish(ctx context.Context, name string) (*Dish, error) {
	row := q.db.QueryRow(ctx, createDish, name)
	var i Dish
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const getAllDishes = `-- name: GetAllDishes :many
SELECT id, name
FROM dish
`

func (q *Queries) GetAllDishes(ctx context.Context) ([]*Dish, error) {
	rows, err := q.db.Query(ctx, getAllDishes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Dish
	for rows.Next() {
		var i Dish
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDishByID = `-- name: GetDishByID :one
SELECT id, name
FROM dish
WHERE id = $1
`

func (q *Queries) GetDishByID(ctx context.Context, id uuid.UUID) (*Dish, error) {
	row := q.db.QueryRow(ctx, getDishByID, id)
	var i Dish
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const renameDish = `-- name: RenameDish :one
UPDATE dish
SET name = $1
WHERE id = $2
RETURNING id, name
`

type RenameDishParams struct {
	Name string    `json:"name"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) RenameDish(ctx context.Context, arg *RenameDishParams) (*Dish, error) {
	row := q.db.QueryRow(ctx, renameDish, arg.Name, arg.ID)
	var i Dish
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}
