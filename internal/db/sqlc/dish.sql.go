// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: dish.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createDish = `-- name: CreateDish :one
INSERT INTO dish (name_de, name_en)
VALUES ($1, $2)
RETURNING id, name_de, name_en
`

type CreateDishParams struct {
	NameDe string         `json:"name_de"`
	NameEn sql.NullString `json:"name_en"`
}

func (q *Queries) CreateDish(ctx context.Context, arg *CreateDishParams) (*Dish, error) {
	row := q.db.QueryRow(ctx, createDish, arg.NameDe, arg.NameEn)
	var i Dish
	err := row.Scan(&i.ID, &i.NameDe, &i.NameEn)
	return &i, err
}

const getAllDishes = `-- name: GetAllDishes :many
SELECT id, name_de, name_en
FROM dish
`

func (q *Queries) GetAllDishes(ctx context.Context) ([]*Dish, error) {
	rows, err := q.db.Query(ctx, getAllDishes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Dish
	for rows.Next() {
		var i Dish
		if err := rows.Scan(&i.ID, &i.NameDe, &i.NameEn); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDishByID = `-- name: GetDishByID :one
SELECT id, name_de, name_en
FROM dish
WHERE id = $1
`

func (q *Queries) GetDishByID(ctx context.Context, id uuid.UUID) (*Dish, error) {
	row := q.db.QueryRow(ctx, getDishByID, id)
	var i Dish
	err := row.Scan(&i.ID, &i.NameDe, &i.NameEn)
	return &i, err
}

const updateDish = `-- name: UpdateDish :one
UPDATE dish
SET
    name_de = COALESCE($2, name_de),
    name_en = COALESCE($3, name_en)
WHERE id = $1
RETURNING id, name_de, name_en
`

type UpdateDishParams struct {
	ID     uuid.UUID      `json:"id"`
	NameDe sql.NullString `json:"name_de"`
	NameEn sql.NullString `json:"name_en"`
}

func (q *Queries) UpdateDish(ctx context.Context, arg *UpdateDishParams) (*Dish, error) {
	row := q.db.QueryRow(ctx, updateDish, arg.ID, arg.NameDe, arg.NameEn)
	var i Dish
	err := row.Scan(&i.ID, &i.NameDe, &i.NameEn)
	return &i, err
}
