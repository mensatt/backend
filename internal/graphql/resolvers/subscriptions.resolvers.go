package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"

	"github.com/google/uuid"
	"github.com/mensatt/backend/internal/database/ent"
	"github.com/mensatt/backend/internal/graphql/gqlserver"
)

// ReviewCreated is the resolver for the reviewCreated field.
func (r *subscriptionResolver) ReviewCreated(ctx context.Context) (<-chan *ent.Review, error) {
	// Create a new channel for every subscription identified by a unique id
	id := uuid.New().String()
	channel := make(chan *ent.Review)

	// Start a goroutine that will clean up the channel when unsubscribed
	go func() {
		<-ctx.Done() // Block until the channel is closed
		r.mutex.Lock()
		delete(r.ReviewCreatedChannels, id)
		r.mutex.Unlock()
	}()

	// Add the channel to the map of channels
	r.mutex.Lock()
	r.ReviewCreatedChannels[id] = channel
	r.mutex.Unlock()

	return channel, nil
}

// ReviewAccepted is the resolver for the reviewAccepted field.
func (r *subscriptionResolver) ReviewAccepted(ctx context.Context) (<-chan *ent.Review, error) {
	// Create a new channel for every subscription identified by a unique id
	id := uuid.New().String()
	channel := make(chan *ent.Review)

	// Start a goroutine that will clean up the channel when unsubscribed
	go func() {
		<-ctx.Done() // Block until the channel is closed
		r.mutex.Lock()
		delete(r.ReviewAcceptedChannels, id)
		r.mutex.Unlock()
	}()

	// Add the channel to the map of channels
	r.mutex.Lock()
	r.ReviewAcceptedChannels[id] = channel
	r.mutex.Unlock()

	return channel, nil
}

// Subscription returns gqlserver.SubscriptionResolver implementation.
func (r *Resolver) Subscription() gqlserver.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
