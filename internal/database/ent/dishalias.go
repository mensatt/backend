// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mensatt/backend/internal/database/ent/dish"
	"github.com/mensatt/backend/internal/database/ent/dishalias"
)

// DishAlias is the model entity for the DishAlias schema.
type DishAlias struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// NormalizedAliasName holds the value of the "normalized_alias_name" field.
	NormalizedAliasName string `json:"normalized_alias_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DishAliasQuery when eager-loading is set.
	Edges        DishAliasEdges `json:"edges"`
	dish         *uuid.UUID
	selectValues sql.SelectValues
}

// DishAliasEdges holds the relations/edges for other nodes in the graph.
type DishAliasEdges struct {
	// Dish holds the value of the dish edge.
	Dish *Dish `json:"dish,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DishOrErr returns the Dish value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DishAliasEdges) DishOrErr() (*Dish, error) {
	if e.loadedTypes[0] {
		if e.Dish == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: dish.Label}
		}
		return e.Dish, nil
	}
	return nil, &NotLoadedError{edge: "dish"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DishAlias) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dishalias.FieldID, dishalias.FieldNormalizedAliasName:
			values[i] = new(sql.NullString)
		case dishalias.ForeignKeys[0]: // dish
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DishAlias fields.
func (da *DishAlias) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dishalias.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				da.ID = value.String
			}
		case dishalias.FieldNormalizedAliasName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field normalized_alias_name", values[i])
			} else if value.Valid {
				da.NormalizedAliasName = value.String
			}
		case dishalias.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field dish", values[i])
			} else if value.Valid {
				da.dish = new(uuid.UUID)
				*da.dish = *value.S.(*uuid.UUID)
			}
		default:
			da.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DishAlias.
// This includes values selected through modifiers, order, etc.
func (da *DishAlias) Value(name string) (ent.Value, error) {
	return da.selectValues.Get(name)
}

// QueryDish queries the "dish" edge of the DishAlias entity.
func (da *DishAlias) QueryDish() *DishQuery {
	return NewDishAliasClient(da.config).QueryDish(da)
}

// Update returns a builder for updating this DishAlias.
// Note that you need to call DishAlias.Unwrap() before calling this method if this DishAlias
// was returned from a transaction, and the transaction was committed or rolled back.
func (da *DishAlias) Update() *DishAliasUpdateOne {
	return NewDishAliasClient(da.config).UpdateOne(da)
}

// Unwrap unwraps the DishAlias entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (da *DishAlias) Unwrap() *DishAlias {
	_tx, ok := da.config.driver.(*txDriver)
	if !ok {
		panic("ent: DishAlias is not a transactional entity")
	}
	da.config.driver = _tx.drv
	return da
}

// String implements the fmt.Stringer.
func (da *DishAlias) String() string {
	var builder strings.Builder
	builder.WriteString("DishAlias(")
	builder.WriteString(fmt.Sprintf("id=%v, ", da.ID))
	builder.WriteString("normalized_alias_name=")
	builder.WriteString(da.NormalizedAliasName)
	builder.WriteByte(')')
	return builder.String()
}

// DishAliasSlice is a parsable slice of DishAlias.
type DishAliasSlice []*DishAlias
