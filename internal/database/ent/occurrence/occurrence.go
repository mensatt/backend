// Code generated by ent, DO NOT EDIT.

package occurrence

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the occurrence type in the database.
	Label = "occurrence"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldKj holds the string denoting the kj field in the database.
	FieldKj = "kj"
	// FieldKcal holds the string denoting the kcal field in the database.
	FieldKcal = "kcal"
	// FieldFat holds the string denoting the fat field in the database.
	FieldFat = "fat"
	// FieldSaturatedFat holds the string denoting the saturated_fat field in the database.
	FieldSaturatedFat = "saturated_fat"
	// FieldCarbohydrates holds the string denoting the carbohydrates field in the database.
	FieldCarbohydrates = "carbohydrates"
	// FieldSugar holds the string denoting the sugar field in the database.
	FieldSugar = "sugar"
	// FieldFiber holds the string denoting the fiber field in the database.
	FieldFiber = "fiber"
	// FieldProtein holds the string denoting the protein field in the database.
	FieldProtein = "protein"
	// FieldSalt holds the string denoting the salt field in the database.
	FieldSalt = "salt"
	// FieldPriceStudent holds the string denoting the price_student field in the database.
	FieldPriceStudent = "price_student"
	// FieldPriceStaff holds the string denoting the price_staff field in the database.
	FieldPriceStaff = "price_staff"
	// FieldPriceGuest holds the string denoting the price_guest field in the database.
	FieldPriceGuest = "price_guest"
	// FieldNotAvailableAfter holds the string denoting the not_available_after field in the database.
	FieldNotAvailableAfter = "not_available_after"
	// EdgeLocation holds the string denoting the location edge name in mutations.
	EdgeLocation = "location"
	// EdgeDish holds the string denoting the dish edge name in mutations.
	EdgeDish = "dish"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeSideDishes holds the string denoting the side_dishes edge name in mutations.
	EdgeSideDishes = "side_dishes"
	// EdgeReviews holds the string denoting the reviews edge name in mutations.
	EdgeReviews = "reviews"
	// TagFieldID holds the string denoting the ID field of the Tag.
	TagFieldID = "key"
	// Table holds the table name of the occurrence in the database.
	Table = "occurrence"
	// LocationTable is the table that holds the location relation/edge.
	LocationTable = "occurrence"
	// LocationInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	LocationInverseTable = "location"
	// LocationColumn is the table column denoting the location relation/edge.
	LocationColumn = "location"
	// DishTable is the table that holds the dish relation/edge.
	DishTable = "occurrence"
	// DishInverseTable is the table name for the Dish entity.
	// It exists in this package in order to avoid circular dependency with the "dish" package.
	DishInverseTable = "dish"
	// DishColumn is the table column denoting the dish relation/edge.
	DishColumn = "dish"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "occurrence_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tag"
	// SideDishesTable is the table that holds the side_dishes relation/edge. The primary key declared below.
	SideDishesTable = "occurrence_side_dishes"
	// SideDishesInverseTable is the table name for the Dish entity.
	// It exists in this package in order to avoid circular dependency with the "dish" package.
	SideDishesInverseTable = "dish"
	// ReviewsTable is the table that holds the reviews relation/edge.
	ReviewsTable = "review"
	// ReviewsInverseTable is the table name for the Review entity.
	// It exists in this package in order to avoid circular dependency with the "review" package.
	ReviewsInverseTable = "review"
	// ReviewsColumn is the table column denoting the reviews relation/edge.
	ReviewsColumn = "occurrence"
)

// Columns holds all SQL columns for occurrence fields.
var Columns = []string{
	FieldID,
	FieldDate,
	FieldKj,
	FieldKcal,
	FieldFat,
	FieldSaturatedFat,
	FieldCarbohydrates,
	FieldSugar,
	FieldFiber,
	FieldProtein,
	FieldSalt,
	FieldPriceStudent,
	FieldPriceStaff,
	FieldPriceGuest,
	FieldNotAvailableAfter,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "occurrence"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"dish",
	"location",
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"occurrence", "tag"}
	// SideDishesPrimaryKey and SideDishesColumn2 are the table columns denoting the
	// primary key for the side_dishes relation (M2M).
	SideDishesPrimaryKey = []string{"occurrence", "dish"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDate holds the default value on creation for the "date" field.
	DefaultDate func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Occurrence queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByKj orders the results by the kj field.
func ByKj(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKj, opts...).ToFunc()
}

// ByKcal orders the results by the kcal field.
func ByKcal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKcal, opts...).ToFunc()
}

// ByFat orders the results by the fat field.
func ByFat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFat, opts...).ToFunc()
}

// BySaturatedFat orders the results by the saturated_fat field.
func BySaturatedFat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSaturatedFat, opts...).ToFunc()
}

// ByCarbohydrates orders the results by the carbohydrates field.
func ByCarbohydrates(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarbohydrates, opts...).ToFunc()
}

// BySugar orders the results by the sugar field.
func BySugar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSugar, opts...).ToFunc()
}

// ByFiber orders the results by the fiber field.
func ByFiber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFiber, opts...).ToFunc()
}

// ByProtein orders the results by the protein field.
func ByProtein(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProtein, opts...).ToFunc()
}

// BySalt orders the results by the salt field.
func BySalt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalt, opts...).ToFunc()
}

// ByPriceStudent orders the results by the price_student field.
func ByPriceStudent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriceStudent, opts...).ToFunc()
}

// ByPriceStaff orders the results by the price_staff field.
func ByPriceStaff(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriceStaff, opts...).ToFunc()
}

// ByPriceGuest orders the results by the price_guest field.
func ByPriceGuest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriceGuest, opts...).ToFunc()
}

// ByNotAvailableAfter orders the results by the not_available_after field.
func ByNotAvailableAfter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotAvailableAfter, opts...).ToFunc()
}

// ByLocationField orders the results by location field.
func ByLocationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLocationStep(), sql.OrderByField(field, opts...))
	}
}

// ByDishField orders the results by dish field.
func ByDishField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDishStep(), sql.OrderByField(field, opts...))
	}
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySideDishesCount orders the results by side_dishes count.
func BySideDishesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSideDishesStep(), opts...)
	}
}

// BySideDishes orders the results by side_dishes terms.
func BySideDishes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSideDishesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReviewsCount orders the results by reviews count.
func ByReviewsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReviewsStep(), opts...)
	}
}

// ByReviews orders the results by reviews terms.
func ByReviews(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReviewsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LocationTable, LocationColumn),
	)
}
func newDishStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DishInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DishTable, DishColumn),
	)
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, TagFieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
	)
}
func newSideDishesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SideDishesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SideDishesTable, SideDishesPrimaryKey...),
	)
}
func newReviewsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReviewsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReviewsTable, ReviewsColumn),
	)
}
