// Code generated by ent, DO NOT EDIT.

package dish

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the dish type in the database.
	Label = "dish"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNameDe holds the string denoting the name_de field in the database.
	FieldNameDe = "name_de"
	// FieldNameEn holds the string denoting the name_en field in the database.
	FieldNameEn = "name_en"
	// EdgeDishOccurrences holds the string denoting the dish_occurrences edge name in mutations.
	EdgeDishOccurrences = "dish_occurrences"
	// EdgeAliases holds the string denoting the aliases edge name in mutations.
	EdgeAliases = "aliases"
	// EdgeSideDishOccurrence holds the string denoting the side_dish_occurrence edge name in mutations.
	EdgeSideDishOccurrence = "side_dish_occurrence"
	// DishAliasFieldID holds the string denoting the ID field of the DishAlias.
	DishAliasFieldID = "alias_name"
	// Table holds the table name of the dish in the database.
	Table = "dish"
	// DishOccurrencesTable is the table that holds the dish_occurrences relation/edge.
	DishOccurrencesTable = "occurrence"
	// DishOccurrencesInverseTable is the table name for the Occurrence entity.
	// It exists in this package in order to avoid circular dependency with the "occurrence" package.
	DishOccurrencesInverseTable = "occurrence"
	// DishOccurrencesColumn is the table column denoting the dish_occurrences relation/edge.
	DishOccurrencesColumn = "dish"
	// AliasesTable is the table that holds the aliases relation/edge.
	AliasesTable = "dish_alias"
	// AliasesInverseTable is the table name for the DishAlias entity.
	// It exists in this package in order to avoid circular dependency with the "dishalias" package.
	AliasesInverseTable = "dish_alias"
	// AliasesColumn is the table column denoting the aliases relation/edge.
	AliasesColumn = "dish"
	// SideDishOccurrenceTable is the table that holds the side_dish_occurrence relation/edge. The primary key declared below.
	SideDishOccurrenceTable = "occurrence_side_dishes"
	// SideDishOccurrenceInverseTable is the table name for the Occurrence entity.
	// It exists in this package in order to avoid circular dependency with the "occurrence" package.
	SideDishOccurrenceInverseTable = "occurrence"
)

// Columns holds all SQL columns for dish fields.
var Columns = []string{
	FieldID,
	FieldNameDe,
	FieldNameEn,
}

var (
	// SideDishOccurrencePrimaryKey and SideDishOccurrenceColumn2 are the table columns denoting the
	// primary key for the side_dish_occurrence relation (M2M).
	SideDishOccurrencePrimaryKey = []string{"occurrence", "dish"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameDeValidator is a validator for the "name_de" field. It is called by the builders before save.
	NameDeValidator func(string) error
	// NameEnValidator is a validator for the "name_en" field. It is called by the builders before save.
	NameEnValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Dish queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNameDe orders the results by the name_de field.
func ByNameDe(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameDe, opts...).ToFunc()
}

// ByNameEn orders the results by the name_en field.
func ByNameEn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameEn, opts...).ToFunc()
}

// ByDishOccurrencesCount orders the results by dish_occurrences count.
func ByDishOccurrencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDishOccurrencesStep(), opts...)
	}
}

// ByDishOccurrences orders the results by dish_occurrences terms.
func ByDishOccurrences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDishOccurrencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAliasesCount orders the results by aliases count.
func ByAliasesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAliasesStep(), opts...)
	}
}

// ByAliases orders the results by aliases terms.
func ByAliases(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAliasesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySideDishOccurrenceCount orders the results by side_dish_occurrence count.
func BySideDishOccurrenceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSideDishOccurrenceStep(), opts...)
	}
}

// BySideDishOccurrence orders the results by side_dish_occurrence terms.
func BySideDishOccurrence(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSideDishOccurrenceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDishOccurrencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DishOccurrencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DishOccurrencesTable, DishOccurrencesColumn),
	)
}
func newAliasesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AliasesInverseTable, DishAliasFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AliasesTable, AliasesColumn),
	)
}
func newSideDishOccurrenceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SideDishOccurrenceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SideDishOccurrenceTable, SideDishOccurrencePrimaryKey...),
	)
}
