// Code generated by ent, DO NOT EDIT.

package dish

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the dish type in the database.
	Label = "dish"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNameDe holds the string denoting the name_de field in the database.
	FieldNameDe = "name_de"
	// FieldNameEn holds the string denoting the name_en field in the database.
	FieldNameEn = "name_en"
	// EdgeOccurrences holds the string denoting the occurrences edge name in mutations.
	EdgeOccurrences = "occurrences"
	// EdgeAliases holds the string denoting the aliases edge name in mutations.
	EdgeAliases = "aliases"
	// Table holds the table name of the dish in the database.
	Table = "dishes"
	// OccurrencesTable is the table that holds the occurrences relation/edge.
	OccurrencesTable = "occurrences"
	// OccurrencesInverseTable is the table name for the Occurrence entity.
	// It exists in this package in order to avoid circular dependency with the "occurrence" package.
	OccurrencesInverseTable = "occurrences"
	// OccurrencesColumn is the table column denoting the occurrences relation/edge.
	OccurrencesColumn = "dish"
	// AliasesTable is the table that holds the aliases relation/edge.
	AliasesTable = "dish_alias"
	// AliasesInverseTable is the table name for the DishAlias entity.
	// It exists in this package in order to avoid circular dependency with the "dishalias" package.
	AliasesInverseTable = "dish_alias"
	// AliasesColumn is the table column denoting the aliases relation/edge.
	AliasesColumn = "dish"
)

// Columns holds all SQL columns for dish fields.
var Columns = []string{
	FieldID,
	FieldNameDe,
	FieldNameEn,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "dishes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"occurrence_side_dishes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
