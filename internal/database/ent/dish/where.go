// Code generated by ent, DO NOT EDIT.

package dish

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/mensatt/backend/internal/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// NameDe applies equality check predicate on the "name_de" field. It's identical to NameDeEQ.
func NameDe(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameDe), v))
	})
}

// NameEn applies equality check predicate on the "name_en" field. It's identical to NameEnEQ.
func NameEn(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameEn), v))
	})
}

// NameDeEQ applies the EQ predicate on the "name_de" field.
func NameDeEQ(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameDe), v))
	})
}

// NameDeNEQ applies the NEQ predicate on the "name_de" field.
func NameDeNEQ(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNameDe), v))
	})
}

// NameDeIn applies the In predicate on the "name_de" field.
func NameDeIn(vs ...string) predicate.Dish {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNameDe), v...))
	})
}

// NameDeNotIn applies the NotIn predicate on the "name_de" field.
func NameDeNotIn(vs ...string) predicate.Dish {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNameDe), v...))
	})
}

// NameDeGT applies the GT predicate on the "name_de" field.
func NameDeGT(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNameDe), v))
	})
}

// NameDeGTE applies the GTE predicate on the "name_de" field.
func NameDeGTE(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNameDe), v))
	})
}

// NameDeLT applies the LT predicate on the "name_de" field.
func NameDeLT(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNameDe), v))
	})
}

// NameDeLTE applies the LTE predicate on the "name_de" field.
func NameDeLTE(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNameDe), v))
	})
}

// NameDeContains applies the Contains predicate on the "name_de" field.
func NameDeContains(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNameDe), v))
	})
}

// NameDeHasPrefix applies the HasPrefix predicate on the "name_de" field.
func NameDeHasPrefix(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNameDe), v))
	})
}

// NameDeHasSuffix applies the HasSuffix predicate on the "name_de" field.
func NameDeHasSuffix(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNameDe), v))
	})
}

// NameDeEqualFold applies the EqualFold predicate on the "name_de" field.
func NameDeEqualFold(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNameDe), v))
	})
}

// NameDeContainsFold applies the ContainsFold predicate on the "name_de" field.
func NameDeContainsFold(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNameDe), v))
	})
}

// NameEnEQ applies the EQ predicate on the "name_en" field.
func NameEnEQ(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameEn), v))
	})
}

// NameEnNEQ applies the NEQ predicate on the "name_en" field.
func NameEnNEQ(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNameEn), v))
	})
}

// NameEnIn applies the In predicate on the "name_en" field.
func NameEnIn(vs ...string) predicate.Dish {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNameEn), v...))
	})
}

// NameEnNotIn applies the NotIn predicate on the "name_en" field.
func NameEnNotIn(vs ...string) predicate.Dish {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNameEn), v...))
	})
}

// NameEnGT applies the GT predicate on the "name_en" field.
func NameEnGT(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNameEn), v))
	})
}

// NameEnGTE applies the GTE predicate on the "name_en" field.
func NameEnGTE(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNameEn), v))
	})
}

// NameEnLT applies the LT predicate on the "name_en" field.
func NameEnLT(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNameEn), v))
	})
}

// NameEnLTE applies the LTE predicate on the "name_en" field.
func NameEnLTE(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNameEn), v))
	})
}

// NameEnContains applies the Contains predicate on the "name_en" field.
func NameEnContains(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNameEn), v))
	})
}

// NameEnHasPrefix applies the HasPrefix predicate on the "name_en" field.
func NameEnHasPrefix(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNameEn), v))
	})
}

// NameEnHasSuffix applies the HasSuffix predicate on the "name_en" field.
func NameEnHasSuffix(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNameEn), v))
	})
}

// NameEnEqualFold applies the EqualFold predicate on the "name_en" field.
func NameEnEqualFold(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNameEn), v))
	})
}

// NameEnContainsFold applies the ContainsFold predicate on the "name_en" field.
func NameEnContainsFold(v string) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNameEn), v))
	})
}

// HasOccurrences applies the HasEdge predicate on the "occurrences" edge.
func HasOccurrences() predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OccurrencesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OccurrencesTable, OccurrencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOccurrencesWith applies the HasEdge predicate on the "occurrences" edge with a given conditions (other predicates).
func HasOccurrencesWith(preds ...predicate.Occurrence) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OccurrencesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OccurrencesTable, OccurrencesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAliases applies the HasEdge predicate on the "aliases" edge.
func HasAliases() predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AliasesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AliasesTable, AliasesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAliasesWith applies the HasEdge predicate on the "aliases" edge with a given conditions (other predicates).
func HasAliasesWith(preds ...predicate.DishAlias) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AliasesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AliasesTable, AliasesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Dish) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Dish) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Dish) predicate.Dish {
	return predicate.Dish(func(s *sql.Selector) {
		p(s.Not())
	})
}
