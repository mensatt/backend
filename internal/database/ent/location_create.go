// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mensatt/backend/internal/database/ent/location"
	"github.com/mensatt/backend/internal/database/ent/occurrence"
)

// LocationCreate is the builder for creating a Location entity.
type LocationCreate struct {
	config
	mutation *LocationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetExternalID sets the "external_id" field.
func (lc *LocationCreate) SetExternalID(i int) *LocationCreate {
	lc.mutation.SetExternalID(i)
	return lc
}

// SetName sets the "name" field.
func (lc *LocationCreate) SetName(s string) *LocationCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetVisible sets the "visible" field.
func (lc *LocationCreate) SetVisible(b bool) *LocationCreate {
	lc.mutation.SetVisible(b)
	return lc
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (lc *LocationCreate) SetNillableVisible(b *bool) *LocationCreate {
	if b != nil {
		lc.SetVisible(*b)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LocationCreate) SetID(u uuid.UUID) *LocationCreate {
	lc.mutation.SetID(u)
	return lc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lc *LocationCreate) SetNillableID(u *uuid.UUID) *LocationCreate {
	if u != nil {
		lc.SetID(*u)
	}
	return lc
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (lc *LocationCreate) AddOccurrenceIDs(ids ...uuid.UUID) *LocationCreate {
	lc.mutation.AddOccurrenceIDs(ids...)
	return lc
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (lc *LocationCreate) AddOccurrences(o ...*Occurrence) *LocationCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return lc.AddOccurrenceIDs(ids...)
}

// Mutation returns the LocationMutation object of the builder.
func (lc *LocationCreate) Mutation() *LocationMutation {
	return lc.mutation
}

// Save creates the Location in the database.
func (lc *LocationCreate) Save(ctx context.Context) (*Location, error) {
	var (
		err  error
		node *Location
	)
	lc.defaults()
	if len(lc.hooks) == 0 {
		if err = lc.check(); err != nil {
			return nil, err
		}
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LocationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lc.check(); err != nil {
				return nil, err
			}
			lc.mutation = mutation
			if node, err = lc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			if lc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Location)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LocationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LocationCreate) SaveX(ctx context.Context) *Location {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LocationCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LocationCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LocationCreate) defaults() {
	if _, ok := lc.mutation.Visible(); !ok {
		v := location.DefaultVisible
		lc.mutation.SetVisible(v)
	}
	if _, ok := lc.mutation.ID(); !ok {
		v := location.DefaultID()
		lc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LocationCreate) check() error {
	if _, ok := lc.mutation.ExternalID(); !ok {
		return &ValidationError{Name: "external_id", err: errors.New(`ent: missing required field "Location.external_id"`)}
	}
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Location.name"`)}
	}
	if v, ok := lc.mutation.Name(); ok {
		if err := location.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Location.name": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Visible(); !ok {
		return &ValidationError{Name: "visible", err: errors.New(`ent: missing required field "Location.visible"`)}
	}
	return nil
}

func (lc *LocationCreate) sqlSave(ctx context.Context) (*Location, error) {
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (lc *LocationCreate) createSpec() (*Location, *sqlgraph.CreateSpec) {
	var (
		_node = &Location{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: location.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: location.FieldID,
			},
		}
	)
	_spec.OnConflict = lc.conflict
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lc.mutation.ExternalID(); ok {
		_spec.SetField(location.FieldExternalID, field.TypeInt, value)
		_node.ExternalID = value
	}
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(location.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lc.mutation.Visible(); ok {
		_spec.SetField(location.FieldVisible, field.TypeBool, value)
		_node.Visible = value
	}
	if nodes := lc.mutation.OccurrencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.OccurrencesTable,
			Columns: []string{location.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: occurrence.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Location.Create().
//		SetExternalID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LocationUpsert) {
//			SetExternalID(v+v).
//		}).
//		Exec(ctx)
func (lc *LocationCreate) OnConflict(opts ...sql.ConflictOption) *LocationUpsertOne {
	lc.conflict = opts
	return &LocationUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Location.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lc *LocationCreate) OnConflictColumns(columns ...string) *LocationUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LocationUpsertOne{
		create: lc,
	}
}

type (
	// LocationUpsertOne is the builder for "upsert"-ing
	//  one Location node.
	LocationUpsertOne struct {
		create *LocationCreate
	}

	// LocationUpsert is the "OnConflict" setter.
	LocationUpsert struct {
		*sql.UpdateSet
	}
)

// SetExternalID sets the "external_id" field.
func (u *LocationUpsert) SetExternalID(v int) *LocationUpsert {
	u.Set(location.FieldExternalID, v)
	return u
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *LocationUpsert) UpdateExternalID() *LocationUpsert {
	u.SetExcluded(location.FieldExternalID)
	return u
}

// AddExternalID adds v to the "external_id" field.
func (u *LocationUpsert) AddExternalID(v int) *LocationUpsert {
	u.Add(location.FieldExternalID, v)
	return u
}

// SetName sets the "name" field.
func (u *LocationUpsert) SetName(v string) *LocationUpsert {
	u.Set(location.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LocationUpsert) UpdateName() *LocationUpsert {
	u.SetExcluded(location.FieldName)
	return u
}

// SetVisible sets the "visible" field.
func (u *LocationUpsert) SetVisible(v bool) *LocationUpsert {
	u.Set(location.FieldVisible, v)
	return u
}

// UpdateVisible sets the "visible" field to the value that was provided on create.
func (u *LocationUpsert) UpdateVisible() *LocationUpsert {
	u.SetExcluded(location.FieldVisible)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Location.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(location.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LocationUpsertOne) UpdateNewValues() *LocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(location.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Location.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LocationUpsertOne) Ignore() *LocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LocationUpsertOne) DoNothing() *LocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LocationCreate.OnConflict
// documentation for more info.
func (u *LocationUpsertOne) Update(set func(*LocationUpsert)) *LocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LocationUpsert{UpdateSet: update})
	}))
	return u
}

// SetExternalID sets the "external_id" field.
func (u *LocationUpsertOne) SetExternalID(v int) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.SetExternalID(v)
	})
}

// AddExternalID adds v to the "external_id" field.
func (u *LocationUpsertOne) AddExternalID(v int) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.AddExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *LocationUpsertOne) UpdateExternalID() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateExternalID()
	})
}

// SetName sets the "name" field.
func (u *LocationUpsertOne) SetName(v string) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LocationUpsertOne) UpdateName() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateName()
	})
}

// SetVisible sets the "visible" field.
func (u *LocationUpsertOne) SetVisible(v bool) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.SetVisible(v)
	})
}

// UpdateVisible sets the "visible" field to the value that was provided on create.
func (u *LocationUpsertOne) UpdateVisible() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateVisible()
	})
}

// Exec executes the query.
func (u *LocationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LocationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LocationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LocationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LocationUpsertOne.ID is not supported by MySQL driver. Use LocationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LocationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LocationCreateBulk is the builder for creating many Location entities in bulk.
type LocationCreateBulk struct {
	config
	builders []*LocationCreate
	conflict []sql.ConflictOption
}

// Save creates the Location entities in the database.
func (lcb *LocationCreateBulk) Save(ctx context.Context) ([]*Location, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Location, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LocationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LocationCreateBulk) SaveX(ctx context.Context) []*Location {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LocationCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LocationCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Location.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LocationUpsert) {
//			SetExternalID(v+v).
//		}).
//		Exec(ctx)
func (lcb *LocationCreateBulk) OnConflict(opts ...sql.ConflictOption) *LocationUpsertBulk {
	lcb.conflict = opts
	return &LocationUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Location.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcb *LocationCreateBulk) OnConflictColumns(columns ...string) *LocationUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LocationUpsertBulk{
		create: lcb,
	}
}

// LocationUpsertBulk is the builder for "upsert"-ing
// a bulk of Location nodes.
type LocationUpsertBulk struct {
	create *LocationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Location.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(location.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LocationUpsertBulk) UpdateNewValues() *LocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(location.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Location.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LocationUpsertBulk) Ignore() *LocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LocationUpsertBulk) DoNothing() *LocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LocationCreateBulk.OnConflict
// documentation for more info.
func (u *LocationUpsertBulk) Update(set func(*LocationUpsert)) *LocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LocationUpsert{UpdateSet: update})
	}))
	return u
}

// SetExternalID sets the "external_id" field.
func (u *LocationUpsertBulk) SetExternalID(v int) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.SetExternalID(v)
	})
}

// AddExternalID adds v to the "external_id" field.
func (u *LocationUpsertBulk) AddExternalID(v int) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.AddExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *LocationUpsertBulk) UpdateExternalID() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateExternalID()
	})
}

// SetName sets the "name" field.
func (u *LocationUpsertBulk) SetName(v string) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LocationUpsertBulk) UpdateName() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateName()
	})
}

// SetVisible sets the "visible" field.
func (u *LocationUpsertBulk) SetVisible(v bool) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.SetVisible(v)
	})
}

// UpdateVisible sets the "visible" field to the value that was provided on create.
func (u *LocationUpsertBulk) UpdateVisible() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateVisible()
	})
}

// Exec executes the query.
func (u *LocationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LocationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LocationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LocationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
