// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mensatt/backend/internal/database/ent/dish"
	"github.com/mensatt/backend/internal/database/ent/dishalias"
	"github.com/mensatt/backend/internal/database/ent/predicate"
)

// DishAliasUpdate is the builder for updating DishAlias entities.
type DishAliasUpdate struct {
	config
	hooks    []Hook
	mutation *DishAliasMutation
}

// Where appends a list predicates to the DishAliasUpdate builder.
func (dau *DishAliasUpdate) Where(ps ...predicate.DishAlias) *DishAliasUpdate {
	dau.mutation.Where(ps...)
	return dau
}

// SetAliasName sets the "alias_name" field.
func (dau *DishAliasUpdate) SetAliasName(s string) *DishAliasUpdate {
	dau.mutation.SetAliasName(s)
	return dau
}

// SetNormalizedAliasName sets the "normalized_alias_name" field.
func (dau *DishAliasUpdate) SetNormalizedAliasName(s string) *DishAliasUpdate {
	dau.mutation.SetNormalizedAliasName(s)
	return dau
}

// SetDishID sets the "dish" edge to the Dish entity by ID.
func (dau *DishAliasUpdate) SetDishID(id uuid.UUID) *DishAliasUpdate {
	dau.mutation.SetDishID(id)
	return dau
}

// SetNillableDishID sets the "dish" edge to the Dish entity by ID if the given value is not nil.
func (dau *DishAliasUpdate) SetNillableDishID(id *uuid.UUID) *DishAliasUpdate {
	if id != nil {
		dau = dau.SetDishID(*id)
	}
	return dau
}

// SetDish sets the "dish" edge to the Dish entity.
func (dau *DishAliasUpdate) SetDish(d *Dish) *DishAliasUpdate {
	return dau.SetDishID(d.ID)
}

// Mutation returns the DishAliasMutation object of the builder.
func (dau *DishAliasUpdate) Mutation() *DishAliasMutation {
	return dau.mutation
}

// ClearDish clears the "dish" edge to the Dish entity.
func (dau *DishAliasUpdate) ClearDish() *DishAliasUpdate {
	dau.mutation.ClearDish()
	return dau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dau *DishAliasUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dau.hooks) == 0 {
		affected, err = dau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DishAliasMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dau.mutation = mutation
			affected, err = dau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dau.hooks) - 1; i >= 0; i-- {
			if dau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dau *DishAliasUpdate) SaveX(ctx context.Context) int {
	affected, err := dau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dau *DishAliasUpdate) Exec(ctx context.Context) error {
	_, err := dau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dau *DishAliasUpdate) ExecX(ctx context.Context) {
	if err := dau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dau *DishAliasUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dishalias.Table,
			Columns: dishalias.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dishalias.FieldID,
			},
		},
	}
	if ps := dau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dau.mutation.AliasName(); ok {
		_spec.SetField(dishalias.FieldAliasName, field.TypeString, value)
	}
	if value, ok := dau.mutation.NormalizedAliasName(); ok {
		_spec.SetField(dishalias.FieldNormalizedAliasName, field.TypeString, value)
	}
	if dau.mutation.DishCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dishalias.DishTable,
			Columns: []string{dishalias.DishColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dish.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dau.mutation.DishIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dishalias.DishTable,
			Columns: []string{dishalias.DishColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dish.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dishalias.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DishAliasUpdateOne is the builder for updating a single DishAlias entity.
type DishAliasUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DishAliasMutation
}

// SetAliasName sets the "alias_name" field.
func (dauo *DishAliasUpdateOne) SetAliasName(s string) *DishAliasUpdateOne {
	dauo.mutation.SetAliasName(s)
	return dauo
}

// SetNormalizedAliasName sets the "normalized_alias_name" field.
func (dauo *DishAliasUpdateOne) SetNormalizedAliasName(s string) *DishAliasUpdateOne {
	dauo.mutation.SetNormalizedAliasName(s)
	return dauo
}

// SetDishID sets the "dish" edge to the Dish entity by ID.
func (dauo *DishAliasUpdateOne) SetDishID(id uuid.UUID) *DishAliasUpdateOne {
	dauo.mutation.SetDishID(id)
	return dauo
}

// SetNillableDishID sets the "dish" edge to the Dish entity by ID if the given value is not nil.
func (dauo *DishAliasUpdateOne) SetNillableDishID(id *uuid.UUID) *DishAliasUpdateOne {
	if id != nil {
		dauo = dauo.SetDishID(*id)
	}
	return dauo
}

// SetDish sets the "dish" edge to the Dish entity.
func (dauo *DishAliasUpdateOne) SetDish(d *Dish) *DishAliasUpdateOne {
	return dauo.SetDishID(d.ID)
}

// Mutation returns the DishAliasMutation object of the builder.
func (dauo *DishAliasUpdateOne) Mutation() *DishAliasMutation {
	return dauo.mutation
}

// ClearDish clears the "dish" edge to the Dish entity.
func (dauo *DishAliasUpdateOne) ClearDish() *DishAliasUpdateOne {
	dauo.mutation.ClearDish()
	return dauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dauo *DishAliasUpdateOne) Select(field string, fields ...string) *DishAliasUpdateOne {
	dauo.fields = append([]string{field}, fields...)
	return dauo
}

// Save executes the query and returns the updated DishAlias entity.
func (dauo *DishAliasUpdateOne) Save(ctx context.Context) (*DishAlias, error) {
	var (
		err  error
		node *DishAlias
	)
	if len(dauo.hooks) == 0 {
		node, err = dauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DishAliasMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dauo.mutation = mutation
			node, err = dauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dauo.hooks) - 1; i >= 0; i-- {
			if dauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DishAlias)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DishAliasMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dauo *DishAliasUpdateOne) SaveX(ctx context.Context) *DishAlias {
	node, err := dauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dauo *DishAliasUpdateOne) Exec(ctx context.Context) error {
	_, err := dauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dauo *DishAliasUpdateOne) ExecX(ctx context.Context) {
	if err := dauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dauo *DishAliasUpdateOne) sqlSave(ctx context.Context) (_node *DishAlias, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dishalias.Table,
			Columns: dishalias.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dishalias.FieldID,
			},
		},
	}
	id, ok := dauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DishAlias.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dishalias.FieldID)
		for _, f := range fields {
			if !dishalias.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dishalias.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dauo.mutation.AliasName(); ok {
		_spec.SetField(dishalias.FieldAliasName, field.TypeString, value)
	}
	if value, ok := dauo.mutation.NormalizedAliasName(); ok {
		_spec.SetField(dishalias.FieldNormalizedAliasName, field.TypeString, value)
	}
	if dauo.mutation.DishCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dishalias.DishTable,
			Columns: []string{dishalias.DishColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dish.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dauo.mutation.DishIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dishalias.DishTable,
			Columns: []string{dishalias.DishColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dish.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DishAlias{config: dauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dishalias.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
