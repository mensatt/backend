// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mensatt/backend/internal/database/ent/dish"
	"github.com/mensatt/backend/internal/database/ent/location"
	"github.com/mensatt/backend/internal/database/ent/occurrence"
	"github.com/mensatt/backend/internal/database/ent/predicate"
	"github.com/mensatt/backend/internal/database/ent/review"
	"github.com/mensatt/backend/internal/database/ent/tag"
)

// OccurrenceQuery is the builder for querying Occurrence entities.
type OccurrenceQuery struct {
	config
	limit          *int
	offset         *int
	unique         *bool
	order          []OrderFunc
	fields         []string
	predicates     []predicate.Occurrence
	withLocation   *LocationQuery
	withDish       *DishQuery
	withSideDishes *DishQuery
	withTag        *TagQuery
	withReviews    *ReviewQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OccurrenceQuery builder.
func (oq *OccurrenceQuery) Where(ps ...predicate.Occurrence) *OccurrenceQuery {
	oq.predicates = append(oq.predicates, ps...)
	return oq
}

// Limit adds a limit step to the query.
func (oq *OccurrenceQuery) Limit(limit int) *OccurrenceQuery {
	oq.limit = &limit
	return oq
}

// Offset adds an offset step to the query.
func (oq *OccurrenceQuery) Offset(offset int) *OccurrenceQuery {
	oq.offset = &offset
	return oq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oq *OccurrenceQuery) Unique(unique bool) *OccurrenceQuery {
	oq.unique = &unique
	return oq
}

// Order adds an order step to the query.
func (oq *OccurrenceQuery) Order(o ...OrderFunc) *OccurrenceQuery {
	oq.order = append(oq.order, o...)
	return oq
}

// QueryLocation chains the current query on the "location" edge.
func (oq *OccurrenceQuery) QueryLocation() *LocationQuery {
	query := &LocationQuery{config: oq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(occurrence.Table, occurrence.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, occurrence.LocationTable, occurrence.LocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDish chains the current query on the "dish" edge.
func (oq *OccurrenceQuery) QueryDish() *DishQuery {
	query := &DishQuery{config: oq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(occurrence.Table, occurrence.FieldID, selector),
			sqlgraph.To(dish.Table, dish.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, occurrence.DishTable, occurrence.DishColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySideDishes chains the current query on the "side_dishes" edge.
func (oq *OccurrenceQuery) QuerySideDishes() *DishQuery {
	query := &DishQuery{config: oq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(occurrence.Table, occurrence.FieldID, selector),
			sqlgraph.To(dish.Table, dish.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, occurrence.SideDishesTable, occurrence.SideDishesColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTag chains the current query on the "tag" edge.
func (oq *OccurrenceQuery) QueryTag() *TagQuery {
	query := &TagQuery{config: oq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(occurrence.Table, occurrence.FieldID, selector),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, occurrence.TagTable, occurrence.TagPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReviews chains the current query on the "reviews" edge.
func (oq *OccurrenceQuery) QueryReviews() *ReviewQuery {
	query := &ReviewQuery{config: oq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(occurrence.Table, occurrence.FieldID, selector),
			sqlgraph.To(review.Table, review.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, occurrence.ReviewsTable, occurrence.ReviewsColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Occurrence entity from the query.
// Returns a *NotFoundError when no Occurrence was found.
func (oq *OccurrenceQuery) First(ctx context.Context) (*Occurrence, error) {
	nodes, err := oq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{occurrence.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oq *OccurrenceQuery) FirstX(ctx context.Context) *Occurrence {
	node, err := oq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Occurrence ID from the query.
// Returns a *NotFoundError when no Occurrence ID was found.
func (oq *OccurrenceQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = oq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{occurrence.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oq *OccurrenceQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := oq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Occurrence entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Occurrence entity is found.
// Returns a *NotFoundError when no Occurrence entities are found.
func (oq *OccurrenceQuery) Only(ctx context.Context) (*Occurrence, error) {
	nodes, err := oq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{occurrence.Label}
	default:
		return nil, &NotSingularError{occurrence.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oq *OccurrenceQuery) OnlyX(ctx context.Context) *Occurrence {
	node, err := oq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Occurrence ID in the query.
// Returns a *NotSingularError when more than one Occurrence ID is found.
// Returns a *NotFoundError when no entities are found.
func (oq *OccurrenceQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = oq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{occurrence.Label}
	default:
		err = &NotSingularError{occurrence.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oq *OccurrenceQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := oq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Occurrences.
func (oq *OccurrenceQuery) All(ctx context.Context) ([]*Occurrence, error) {
	if err := oq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return oq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (oq *OccurrenceQuery) AllX(ctx context.Context) []*Occurrence {
	nodes, err := oq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Occurrence IDs.
func (oq *OccurrenceQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := oq.Select(occurrence.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oq *OccurrenceQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := oq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oq *OccurrenceQuery) Count(ctx context.Context) (int, error) {
	if err := oq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return oq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (oq *OccurrenceQuery) CountX(ctx context.Context) int {
	count, err := oq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oq *OccurrenceQuery) Exist(ctx context.Context) (bool, error) {
	if err := oq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return oq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (oq *OccurrenceQuery) ExistX(ctx context.Context) bool {
	exist, err := oq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OccurrenceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oq *OccurrenceQuery) Clone() *OccurrenceQuery {
	if oq == nil {
		return nil
	}
	return &OccurrenceQuery{
		config:         oq.config,
		limit:          oq.limit,
		offset:         oq.offset,
		order:          append([]OrderFunc{}, oq.order...),
		predicates:     append([]predicate.Occurrence{}, oq.predicates...),
		withLocation:   oq.withLocation.Clone(),
		withDish:       oq.withDish.Clone(),
		withSideDishes: oq.withSideDishes.Clone(),
		withTag:        oq.withTag.Clone(),
		withReviews:    oq.withReviews.Clone(),
		// clone intermediate query.
		sql:    oq.sql.Clone(),
		path:   oq.path,
		unique: oq.unique,
	}
}

// WithLocation tells the query-builder to eager-load the nodes that are connected to
// the "location" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OccurrenceQuery) WithLocation(opts ...func(*LocationQuery)) *OccurrenceQuery {
	query := &LocationQuery{config: oq.config}
	for _, opt := range opts {
		opt(query)
	}
	oq.withLocation = query
	return oq
}

// WithDish tells the query-builder to eager-load the nodes that are connected to
// the "dish" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OccurrenceQuery) WithDish(opts ...func(*DishQuery)) *OccurrenceQuery {
	query := &DishQuery{config: oq.config}
	for _, opt := range opts {
		opt(query)
	}
	oq.withDish = query
	return oq
}

// WithSideDishes tells the query-builder to eager-load the nodes that are connected to
// the "side_dishes" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OccurrenceQuery) WithSideDishes(opts ...func(*DishQuery)) *OccurrenceQuery {
	query := &DishQuery{config: oq.config}
	for _, opt := range opts {
		opt(query)
	}
	oq.withSideDishes = query
	return oq
}

// WithTag tells the query-builder to eager-load the nodes that are connected to
// the "tag" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OccurrenceQuery) WithTag(opts ...func(*TagQuery)) *OccurrenceQuery {
	query := &TagQuery{config: oq.config}
	for _, opt := range opts {
		opt(query)
	}
	oq.withTag = query
	return oq
}

// WithReviews tells the query-builder to eager-load the nodes that are connected to
// the "reviews" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OccurrenceQuery) WithReviews(opts ...func(*ReviewQuery)) *OccurrenceQuery {
	query := &ReviewQuery{config: oq.config}
	for _, opt := range opts {
		opt(query)
	}
	oq.withReviews = query
	return oq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Date time.Time `json:"date,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Occurrence.Query().
//		GroupBy(occurrence.FieldDate).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oq *OccurrenceQuery) GroupBy(field string, fields ...string) *OccurrenceGroupBy {
	grbuild := &OccurrenceGroupBy{config: oq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return oq.sqlQuery(ctx), nil
	}
	grbuild.label = occurrence.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Date time.Time `json:"date,omitempty"`
//	}
//
//	client.Occurrence.Query().
//		Select(occurrence.FieldDate).
//		Scan(ctx, &v)
func (oq *OccurrenceQuery) Select(fields ...string) *OccurrenceSelect {
	oq.fields = append(oq.fields, fields...)
	selbuild := &OccurrenceSelect{OccurrenceQuery: oq}
	selbuild.label = occurrence.Label
	selbuild.flds, selbuild.scan = &oq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a OccurrenceSelect configured with the given aggregations.
func (oq *OccurrenceQuery) Aggregate(fns ...AggregateFunc) *OccurrenceSelect {
	return oq.Select().Aggregate(fns...)
}

func (oq *OccurrenceQuery) prepareQuery(ctx context.Context) error {
	for _, f := range oq.fields {
		if !occurrence.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oq.path != nil {
		prev, err := oq.path(ctx)
		if err != nil {
			return err
		}
		oq.sql = prev
	}
	return nil
}

func (oq *OccurrenceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Occurrence, error) {
	var (
		nodes       = []*Occurrence{}
		withFKs     = oq.withFKs
		_spec       = oq.querySpec()
		loadedTypes = [5]bool{
			oq.withLocation != nil,
			oq.withDish != nil,
			oq.withSideDishes != nil,
			oq.withTag != nil,
			oq.withReviews != nil,
		}
	)
	if oq.withLocation != nil || oq.withDish != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, occurrence.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Occurrence).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Occurrence{config: oq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oq.withLocation; query != nil {
		if err := oq.loadLocation(ctx, query, nodes, nil,
			func(n *Occurrence, e *Location) { n.Edges.Location = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withDish; query != nil {
		if err := oq.loadDish(ctx, query, nodes, nil,
			func(n *Occurrence, e *Dish) { n.Edges.Dish = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withSideDishes; query != nil {
		if err := oq.loadSideDishes(ctx, query, nodes,
			func(n *Occurrence) { n.Edges.SideDishes = []*Dish{} },
			func(n *Occurrence, e *Dish) { n.Edges.SideDishes = append(n.Edges.SideDishes, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withTag; query != nil {
		if err := oq.loadTag(ctx, query, nodes,
			func(n *Occurrence) { n.Edges.Tag = []*Tag{} },
			func(n *Occurrence, e *Tag) { n.Edges.Tag = append(n.Edges.Tag, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withReviews; query != nil {
		if err := oq.loadReviews(ctx, query, nodes,
			func(n *Occurrence) { n.Edges.Reviews = []*Review{} },
			func(n *Occurrence, e *Review) { n.Edges.Reviews = append(n.Edges.Reviews, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oq *OccurrenceQuery) loadLocation(ctx context.Context, query *LocationQuery, nodes []*Occurrence, init func(*Occurrence), assign func(*Occurrence, *Location)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Occurrence)
	for i := range nodes {
		if nodes[i].location == nil {
			continue
		}
		fk := *nodes[i].location
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(location.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "location" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OccurrenceQuery) loadDish(ctx context.Context, query *DishQuery, nodes []*Occurrence, init func(*Occurrence), assign func(*Occurrence, *Dish)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Occurrence)
	for i := range nodes {
		if nodes[i].dish == nil {
			continue
		}
		fk := *nodes[i].dish
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(dish.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "dish" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OccurrenceQuery) loadSideDishes(ctx context.Context, query *DishQuery, nodes []*Occurrence, init func(*Occurrence), assign func(*Occurrence, *Dish)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Occurrence)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Dish(func(s *sql.Selector) {
		s.Where(sql.InValues(occurrence.SideDishesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.occurrence_side_dishes
		if fk == nil {
			return fmt.Errorf(`foreign-key "occurrence_side_dishes" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "occurrence_side_dishes" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OccurrenceQuery) loadTag(ctx context.Context, query *TagQuery, nodes []*Occurrence, init func(*Occurrence), assign func(*Occurrence, *Tag)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Occurrence)
	nids := make(map[int]map[*Occurrence]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(occurrence.TagTable)
		s.Join(joinT).On(s.C(tag.FieldID), joinT.C(occurrence.TagPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(occurrence.TagPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(occurrence.TagPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Occurrence]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tag" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (oq *OccurrenceQuery) loadReviews(ctx context.Context, query *ReviewQuery, nodes []*Occurrence, init func(*Occurrence), assign func(*Occurrence, *Review)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Occurrence)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Review(func(s *sql.Selector) {
		s.Where(sql.InValues(occurrence.ReviewsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.occurrence
		if fk == nil {
			return fmt.Errorf(`foreign-key "occurrence" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "occurrence" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (oq *OccurrenceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oq.querySpec()
	_spec.Node.Columns = oq.fields
	if len(oq.fields) > 0 {
		_spec.Unique = oq.unique != nil && *oq.unique
	}
	return sqlgraph.CountNodes(ctx, oq.driver, _spec)
}

func (oq *OccurrenceQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := oq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (oq *OccurrenceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   occurrence.Table,
			Columns: occurrence.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: occurrence.FieldID,
			},
		},
		From:   oq.sql,
		Unique: true,
	}
	if unique := oq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := oq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, occurrence.FieldID)
		for i := range fields {
			if fields[i] != occurrence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := oq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oq *OccurrenceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oq.driver.Dialect())
	t1 := builder.Table(occurrence.Table)
	columns := oq.fields
	if len(columns) == 0 {
		columns = occurrence.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oq.sql != nil {
		selector = oq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oq.unique != nil && *oq.unique {
		selector.Distinct()
	}
	for _, p := range oq.predicates {
		p(selector)
	}
	for _, p := range oq.order {
		p(selector)
	}
	if offset := oq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OccurrenceGroupBy is the group-by builder for Occurrence entities.
type OccurrenceGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ogb *OccurrenceGroupBy) Aggregate(fns ...AggregateFunc) *OccurrenceGroupBy {
	ogb.fns = append(ogb.fns, fns...)
	return ogb
}

// Scan applies the group-by query and scans the result into the given value.
func (ogb *OccurrenceGroupBy) Scan(ctx context.Context, v any) error {
	query, err := ogb.path(ctx)
	if err != nil {
		return err
	}
	ogb.sql = query
	return ogb.sqlScan(ctx, v)
}

func (ogb *OccurrenceGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range ogb.fields {
		if !occurrence.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ogb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ogb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ogb *OccurrenceGroupBy) sqlQuery() *sql.Selector {
	selector := ogb.sql.Select()
	aggregation := make([]string, 0, len(ogb.fns))
	for _, fn := range ogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ogb.fields)+len(ogb.fns))
		for _, f := range ogb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ogb.fields...)...)
}

// OccurrenceSelect is the builder for selecting fields of Occurrence entities.
type OccurrenceSelect struct {
	*OccurrenceQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (os *OccurrenceSelect) Aggregate(fns ...AggregateFunc) *OccurrenceSelect {
	os.fns = append(os.fns, fns...)
	return os
}

// Scan applies the selector query and scans the result into the given value.
func (os *OccurrenceSelect) Scan(ctx context.Context, v any) error {
	if err := os.prepareQuery(ctx); err != nil {
		return err
	}
	os.sql = os.OccurrenceQuery.sqlQuery(ctx)
	return os.sqlScan(ctx, v)
}

func (os *OccurrenceSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(os.fns))
	for _, fn := range os.fns {
		aggregation = append(aggregation, fn(os.sql))
	}
	switch n := len(*os.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		os.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		os.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := os.sql.Query()
	if err := os.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
