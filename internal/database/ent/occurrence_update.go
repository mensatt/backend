// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mensatt/backend/internal/database/ent/dish"
	"github.com/mensatt/backend/internal/database/ent/location"
	"github.com/mensatt/backend/internal/database/ent/occurrence"
	"github.com/mensatt/backend/internal/database/ent/predicate"
	"github.com/mensatt/backend/internal/database/ent/review"
	"github.com/mensatt/backend/internal/database/ent/tag"
)

// OccurrenceUpdate is the builder for updating Occurrence entities.
type OccurrenceUpdate struct {
	config
	hooks    []Hook
	mutation *OccurrenceMutation
}

// Where appends a list predicates to the OccurrenceUpdate builder.
func (ou *OccurrenceUpdate) Where(ps ...predicate.Occurrence) *OccurrenceUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetDate sets the "date" field.
func (ou *OccurrenceUpdate) SetDate(t time.Time) *OccurrenceUpdate {
	ou.mutation.SetDate(t)
	return ou
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillableDate(t *time.Time) *OccurrenceUpdate {
	if t != nil {
		ou.SetDate(*t)
	}
	return ou
}

// SetKj sets the "kj" field.
func (ou *OccurrenceUpdate) SetKj(i int) *OccurrenceUpdate {
	ou.mutation.ResetKj()
	ou.mutation.SetKj(i)
	return ou
}

// SetNillableKj sets the "kj" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillableKj(i *int) *OccurrenceUpdate {
	if i != nil {
		ou.SetKj(*i)
	}
	return ou
}

// AddKj adds i to the "kj" field.
func (ou *OccurrenceUpdate) AddKj(i int) *OccurrenceUpdate {
	ou.mutation.AddKj(i)
	return ou
}

// ClearKj clears the value of the "kj" field.
func (ou *OccurrenceUpdate) ClearKj() *OccurrenceUpdate {
	ou.mutation.ClearKj()
	return ou
}

// SetKcal sets the "kcal" field.
func (ou *OccurrenceUpdate) SetKcal(i int) *OccurrenceUpdate {
	ou.mutation.ResetKcal()
	ou.mutation.SetKcal(i)
	return ou
}

// SetNillableKcal sets the "kcal" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillableKcal(i *int) *OccurrenceUpdate {
	if i != nil {
		ou.SetKcal(*i)
	}
	return ou
}

// AddKcal adds i to the "kcal" field.
func (ou *OccurrenceUpdate) AddKcal(i int) *OccurrenceUpdate {
	ou.mutation.AddKcal(i)
	return ou
}

// ClearKcal clears the value of the "kcal" field.
func (ou *OccurrenceUpdate) ClearKcal() *OccurrenceUpdate {
	ou.mutation.ClearKcal()
	return ou
}

// SetFat sets the "fat" field.
func (ou *OccurrenceUpdate) SetFat(i int) *OccurrenceUpdate {
	ou.mutation.ResetFat()
	ou.mutation.SetFat(i)
	return ou
}

// SetNillableFat sets the "fat" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillableFat(i *int) *OccurrenceUpdate {
	if i != nil {
		ou.SetFat(*i)
	}
	return ou
}

// AddFat adds i to the "fat" field.
func (ou *OccurrenceUpdate) AddFat(i int) *OccurrenceUpdate {
	ou.mutation.AddFat(i)
	return ou
}

// ClearFat clears the value of the "fat" field.
func (ou *OccurrenceUpdate) ClearFat() *OccurrenceUpdate {
	ou.mutation.ClearFat()
	return ou
}

// SetSaturatedFat sets the "saturated_fat" field.
func (ou *OccurrenceUpdate) SetSaturatedFat(i int) *OccurrenceUpdate {
	ou.mutation.ResetSaturatedFat()
	ou.mutation.SetSaturatedFat(i)
	return ou
}

// SetNillableSaturatedFat sets the "saturated_fat" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillableSaturatedFat(i *int) *OccurrenceUpdate {
	if i != nil {
		ou.SetSaturatedFat(*i)
	}
	return ou
}

// AddSaturatedFat adds i to the "saturated_fat" field.
func (ou *OccurrenceUpdate) AddSaturatedFat(i int) *OccurrenceUpdate {
	ou.mutation.AddSaturatedFat(i)
	return ou
}

// ClearSaturatedFat clears the value of the "saturated_fat" field.
func (ou *OccurrenceUpdate) ClearSaturatedFat() *OccurrenceUpdate {
	ou.mutation.ClearSaturatedFat()
	return ou
}

// SetCarbohydrates sets the "carbohydrates" field.
func (ou *OccurrenceUpdate) SetCarbohydrates(i int) *OccurrenceUpdate {
	ou.mutation.ResetCarbohydrates()
	ou.mutation.SetCarbohydrates(i)
	return ou
}

// SetNillableCarbohydrates sets the "carbohydrates" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillableCarbohydrates(i *int) *OccurrenceUpdate {
	if i != nil {
		ou.SetCarbohydrates(*i)
	}
	return ou
}

// AddCarbohydrates adds i to the "carbohydrates" field.
func (ou *OccurrenceUpdate) AddCarbohydrates(i int) *OccurrenceUpdate {
	ou.mutation.AddCarbohydrates(i)
	return ou
}

// ClearCarbohydrates clears the value of the "carbohydrates" field.
func (ou *OccurrenceUpdate) ClearCarbohydrates() *OccurrenceUpdate {
	ou.mutation.ClearCarbohydrates()
	return ou
}

// SetSugar sets the "sugar" field.
func (ou *OccurrenceUpdate) SetSugar(i int) *OccurrenceUpdate {
	ou.mutation.ResetSugar()
	ou.mutation.SetSugar(i)
	return ou
}

// SetNillableSugar sets the "sugar" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillableSugar(i *int) *OccurrenceUpdate {
	if i != nil {
		ou.SetSugar(*i)
	}
	return ou
}

// AddSugar adds i to the "sugar" field.
func (ou *OccurrenceUpdate) AddSugar(i int) *OccurrenceUpdate {
	ou.mutation.AddSugar(i)
	return ou
}

// ClearSugar clears the value of the "sugar" field.
func (ou *OccurrenceUpdate) ClearSugar() *OccurrenceUpdate {
	ou.mutation.ClearSugar()
	return ou
}

// SetFiber sets the "fiber" field.
func (ou *OccurrenceUpdate) SetFiber(i int) *OccurrenceUpdate {
	ou.mutation.ResetFiber()
	ou.mutation.SetFiber(i)
	return ou
}

// SetNillableFiber sets the "fiber" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillableFiber(i *int) *OccurrenceUpdate {
	if i != nil {
		ou.SetFiber(*i)
	}
	return ou
}

// AddFiber adds i to the "fiber" field.
func (ou *OccurrenceUpdate) AddFiber(i int) *OccurrenceUpdate {
	ou.mutation.AddFiber(i)
	return ou
}

// ClearFiber clears the value of the "fiber" field.
func (ou *OccurrenceUpdate) ClearFiber() *OccurrenceUpdate {
	ou.mutation.ClearFiber()
	return ou
}

// SetProtein sets the "protein" field.
func (ou *OccurrenceUpdate) SetProtein(i int) *OccurrenceUpdate {
	ou.mutation.ResetProtein()
	ou.mutation.SetProtein(i)
	return ou
}

// SetNillableProtein sets the "protein" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillableProtein(i *int) *OccurrenceUpdate {
	if i != nil {
		ou.SetProtein(*i)
	}
	return ou
}

// AddProtein adds i to the "protein" field.
func (ou *OccurrenceUpdate) AddProtein(i int) *OccurrenceUpdate {
	ou.mutation.AddProtein(i)
	return ou
}

// ClearProtein clears the value of the "protein" field.
func (ou *OccurrenceUpdate) ClearProtein() *OccurrenceUpdate {
	ou.mutation.ClearProtein()
	return ou
}

// SetSalt sets the "salt" field.
func (ou *OccurrenceUpdate) SetSalt(i int) *OccurrenceUpdate {
	ou.mutation.ResetSalt()
	ou.mutation.SetSalt(i)
	return ou
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillableSalt(i *int) *OccurrenceUpdate {
	if i != nil {
		ou.SetSalt(*i)
	}
	return ou
}

// AddSalt adds i to the "salt" field.
func (ou *OccurrenceUpdate) AddSalt(i int) *OccurrenceUpdate {
	ou.mutation.AddSalt(i)
	return ou
}

// ClearSalt clears the value of the "salt" field.
func (ou *OccurrenceUpdate) ClearSalt() *OccurrenceUpdate {
	ou.mutation.ClearSalt()
	return ou
}

// SetPriceStudent sets the "price_student" field.
func (ou *OccurrenceUpdate) SetPriceStudent(i int) *OccurrenceUpdate {
	ou.mutation.ResetPriceStudent()
	ou.mutation.SetPriceStudent(i)
	return ou
}

// SetNillablePriceStudent sets the "price_student" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillablePriceStudent(i *int) *OccurrenceUpdate {
	if i != nil {
		ou.SetPriceStudent(*i)
	}
	return ou
}

// AddPriceStudent adds i to the "price_student" field.
func (ou *OccurrenceUpdate) AddPriceStudent(i int) *OccurrenceUpdate {
	ou.mutation.AddPriceStudent(i)
	return ou
}

// ClearPriceStudent clears the value of the "price_student" field.
func (ou *OccurrenceUpdate) ClearPriceStudent() *OccurrenceUpdate {
	ou.mutation.ClearPriceStudent()
	return ou
}

// SetPriceStaff sets the "price_staff" field.
func (ou *OccurrenceUpdate) SetPriceStaff(i int) *OccurrenceUpdate {
	ou.mutation.ResetPriceStaff()
	ou.mutation.SetPriceStaff(i)
	return ou
}

// SetNillablePriceStaff sets the "price_staff" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillablePriceStaff(i *int) *OccurrenceUpdate {
	if i != nil {
		ou.SetPriceStaff(*i)
	}
	return ou
}

// AddPriceStaff adds i to the "price_staff" field.
func (ou *OccurrenceUpdate) AddPriceStaff(i int) *OccurrenceUpdate {
	ou.mutation.AddPriceStaff(i)
	return ou
}

// ClearPriceStaff clears the value of the "price_staff" field.
func (ou *OccurrenceUpdate) ClearPriceStaff() *OccurrenceUpdate {
	ou.mutation.ClearPriceStaff()
	return ou
}

// SetPriceGuest sets the "price_guest" field.
func (ou *OccurrenceUpdate) SetPriceGuest(i int) *OccurrenceUpdate {
	ou.mutation.ResetPriceGuest()
	ou.mutation.SetPriceGuest(i)
	return ou
}

// SetNillablePriceGuest sets the "price_guest" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillablePriceGuest(i *int) *OccurrenceUpdate {
	if i != nil {
		ou.SetPriceGuest(*i)
	}
	return ou
}

// AddPriceGuest adds i to the "price_guest" field.
func (ou *OccurrenceUpdate) AddPriceGuest(i int) *OccurrenceUpdate {
	ou.mutation.AddPriceGuest(i)
	return ou
}

// ClearPriceGuest clears the value of the "price_guest" field.
func (ou *OccurrenceUpdate) ClearPriceGuest() *OccurrenceUpdate {
	ou.mutation.ClearPriceGuest()
	return ou
}

// SetNotAvailableAfter sets the "notAvailableAfter" field.
func (ou *OccurrenceUpdate) SetNotAvailableAfter(t time.Time) *OccurrenceUpdate {
	ou.mutation.SetNotAvailableAfter(t)
	return ou
}

// SetNillableNotAvailableAfter sets the "notAvailableAfter" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillableNotAvailableAfter(t *time.Time) *OccurrenceUpdate {
	if t != nil {
		ou.SetNotAvailableAfter(*t)
	}
	return ou
}

// ClearNotAvailableAfter clears the value of the "notAvailableAfter" field.
func (ou *OccurrenceUpdate) ClearNotAvailableAfter() *OccurrenceUpdate {
	ou.mutation.ClearNotAvailableAfter()
	return ou
}

// SetLocationID sets the "location" edge to the Location entity by ID.
func (ou *OccurrenceUpdate) SetLocationID(id uuid.UUID) *OccurrenceUpdate {
	ou.mutation.SetLocationID(id)
	return ou
}

// SetLocation sets the "location" edge to the Location entity.
func (ou *OccurrenceUpdate) SetLocation(l *Location) *OccurrenceUpdate {
	return ou.SetLocationID(l.ID)
}

// SetDishID sets the "dish" edge to the Dish entity by ID.
func (ou *OccurrenceUpdate) SetDishID(id uuid.UUID) *OccurrenceUpdate {
	ou.mutation.SetDishID(id)
	return ou
}

// SetDish sets the "dish" edge to the Dish entity.
func (ou *OccurrenceUpdate) SetDish(d *Dish) *OccurrenceUpdate {
	return ou.SetDishID(d.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (ou *OccurrenceUpdate) AddTagIDs(ids ...string) *OccurrenceUpdate {
	ou.mutation.AddTagIDs(ids...)
	return ou
}

// AddTags adds the "tags" edges to the Tag entity.
func (ou *OccurrenceUpdate) AddTags(t ...*Tag) *OccurrenceUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.AddTagIDs(ids...)
}

// AddSideDishIDs adds the "side_dishes" edge to the Dish entity by IDs.
func (ou *OccurrenceUpdate) AddSideDishIDs(ids ...uuid.UUID) *OccurrenceUpdate {
	ou.mutation.AddSideDishIDs(ids...)
	return ou
}

// AddSideDishes adds the "side_dishes" edges to the Dish entity.
func (ou *OccurrenceUpdate) AddSideDishes(d ...*Dish) *OccurrenceUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ou.AddSideDishIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (ou *OccurrenceUpdate) AddReviewIDs(ids ...uuid.UUID) *OccurrenceUpdate {
	ou.mutation.AddReviewIDs(ids...)
	return ou
}

// AddReviews adds the "reviews" edges to the Review entity.
func (ou *OccurrenceUpdate) AddReviews(r ...*Review) *OccurrenceUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.AddReviewIDs(ids...)
}

// Mutation returns the OccurrenceMutation object of the builder.
func (ou *OccurrenceUpdate) Mutation() *OccurrenceMutation {
	return ou.mutation
}

// ClearLocation clears the "location" edge to the Location entity.
func (ou *OccurrenceUpdate) ClearLocation() *OccurrenceUpdate {
	ou.mutation.ClearLocation()
	return ou
}

// ClearDish clears the "dish" edge to the Dish entity.
func (ou *OccurrenceUpdate) ClearDish() *OccurrenceUpdate {
	ou.mutation.ClearDish()
	return ou
}

// ClearTags clears all "tags" edges to the Tag entity.
func (ou *OccurrenceUpdate) ClearTags() *OccurrenceUpdate {
	ou.mutation.ClearTags()
	return ou
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (ou *OccurrenceUpdate) RemoveTagIDs(ids ...string) *OccurrenceUpdate {
	ou.mutation.RemoveTagIDs(ids...)
	return ou
}

// RemoveTags removes "tags" edges to Tag entities.
func (ou *OccurrenceUpdate) RemoveTags(t ...*Tag) *OccurrenceUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.RemoveTagIDs(ids...)
}

// ClearSideDishes clears all "side_dishes" edges to the Dish entity.
func (ou *OccurrenceUpdate) ClearSideDishes() *OccurrenceUpdate {
	ou.mutation.ClearSideDishes()
	return ou
}

// RemoveSideDishIDs removes the "side_dishes" edge to Dish entities by IDs.
func (ou *OccurrenceUpdate) RemoveSideDishIDs(ids ...uuid.UUID) *OccurrenceUpdate {
	ou.mutation.RemoveSideDishIDs(ids...)
	return ou
}

// RemoveSideDishes removes "side_dishes" edges to Dish entities.
func (ou *OccurrenceUpdate) RemoveSideDishes(d ...*Dish) *OccurrenceUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ou.RemoveSideDishIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (ou *OccurrenceUpdate) ClearReviews() *OccurrenceUpdate {
	ou.mutation.ClearReviews()
	return ou
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (ou *OccurrenceUpdate) RemoveReviewIDs(ids ...uuid.UUID) *OccurrenceUpdate {
	ou.mutation.RemoveReviewIDs(ids...)
	return ou
}

// RemoveReviews removes "reviews" edges to Review entities.
func (ou *OccurrenceUpdate) RemoveReviews(r ...*Review) *OccurrenceUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.RemoveReviewIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OccurrenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OccurrenceUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OccurrenceUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OccurrenceUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OccurrenceUpdate) check() error {
	if _, ok := ou.mutation.LocationID(); ou.mutation.LocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Occurrence.location"`)
	}
	if _, ok := ou.mutation.DishID(); ou.mutation.DishCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Occurrence.dish"`)
	}
	return nil
}

func (ou *OccurrenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(occurrence.Table, occurrence.Columns, sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Date(); ok {
		_spec.SetField(occurrence.FieldDate, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Kj(); ok {
		_spec.SetField(occurrence.FieldKj, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedKj(); ok {
		_spec.AddField(occurrence.FieldKj, field.TypeInt, value)
	}
	if ou.mutation.KjCleared() {
		_spec.ClearField(occurrence.FieldKj, field.TypeInt)
	}
	if value, ok := ou.mutation.Kcal(); ok {
		_spec.SetField(occurrence.FieldKcal, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedKcal(); ok {
		_spec.AddField(occurrence.FieldKcal, field.TypeInt, value)
	}
	if ou.mutation.KcalCleared() {
		_spec.ClearField(occurrence.FieldKcal, field.TypeInt)
	}
	if value, ok := ou.mutation.Fat(); ok {
		_spec.SetField(occurrence.FieldFat, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedFat(); ok {
		_spec.AddField(occurrence.FieldFat, field.TypeInt, value)
	}
	if ou.mutation.FatCleared() {
		_spec.ClearField(occurrence.FieldFat, field.TypeInt)
	}
	if value, ok := ou.mutation.SaturatedFat(); ok {
		_spec.SetField(occurrence.FieldSaturatedFat, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedSaturatedFat(); ok {
		_spec.AddField(occurrence.FieldSaturatedFat, field.TypeInt, value)
	}
	if ou.mutation.SaturatedFatCleared() {
		_spec.ClearField(occurrence.FieldSaturatedFat, field.TypeInt)
	}
	if value, ok := ou.mutation.Carbohydrates(); ok {
		_spec.SetField(occurrence.FieldCarbohydrates, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedCarbohydrates(); ok {
		_spec.AddField(occurrence.FieldCarbohydrates, field.TypeInt, value)
	}
	if ou.mutation.CarbohydratesCleared() {
		_spec.ClearField(occurrence.FieldCarbohydrates, field.TypeInt)
	}
	if value, ok := ou.mutation.Sugar(); ok {
		_spec.SetField(occurrence.FieldSugar, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedSugar(); ok {
		_spec.AddField(occurrence.FieldSugar, field.TypeInt, value)
	}
	if ou.mutation.SugarCleared() {
		_spec.ClearField(occurrence.FieldSugar, field.TypeInt)
	}
	if value, ok := ou.mutation.Fiber(); ok {
		_spec.SetField(occurrence.FieldFiber, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedFiber(); ok {
		_spec.AddField(occurrence.FieldFiber, field.TypeInt, value)
	}
	if ou.mutation.FiberCleared() {
		_spec.ClearField(occurrence.FieldFiber, field.TypeInt)
	}
	if value, ok := ou.mutation.Protein(); ok {
		_spec.SetField(occurrence.FieldProtein, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedProtein(); ok {
		_spec.AddField(occurrence.FieldProtein, field.TypeInt, value)
	}
	if ou.mutation.ProteinCleared() {
		_spec.ClearField(occurrence.FieldProtein, field.TypeInt)
	}
	if value, ok := ou.mutation.Salt(); ok {
		_spec.SetField(occurrence.FieldSalt, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedSalt(); ok {
		_spec.AddField(occurrence.FieldSalt, field.TypeInt, value)
	}
	if ou.mutation.SaltCleared() {
		_spec.ClearField(occurrence.FieldSalt, field.TypeInt)
	}
	if value, ok := ou.mutation.PriceStudent(); ok {
		_spec.SetField(occurrence.FieldPriceStudent, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedPriceStudent(); ok {
		_spec.AddField(occurrence.FieldPriceStudent, field.TypeInt, value)
	}
	if ou.mutation.PriceStudentCleared() {
		_spec.ClearField(occurrence.FieldPriceStudent, field.TypeInt)
	}
	if value, ok := ou.mutation.PriceStaff(); ok {
		_spec.SetField(occurrence.FieldPriceStaff, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedPriceStaff(); ok {
		_spec.AddField(occurrence.FieldPriceStaff, field.TypeInt, value)
	}
	if ou.mutation.PriceStaffCleared() {
		_spec.ClearField(occurrence.FieldPriceStaff, field.TypeInt)
	}
	if value, ok := ou.mutation.PriceGuest(); ok {
		_spec.SetField(occurrence.FieldPriceGuest, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedPriceGuest(); ok {
		_spec.AddField(occurrence.FieldPriceGuest, field.TypeInt, value)
	}
	if ou.mutation.PriceGuestCleared() {
		_spec.ClearField(occurrence.FieldPriceGuest, field.TypeInt)
	}
	if value, ok := ou.mutation.NotAvailableAfter(); ok {
		_spec.SetField(occurrence.FieldNotAvailableAfter, field.TypeTime, value)
	}
	if ou.mutation.NotAvailableAfterCleared() {
		_spec.ClearField(occurrence.FieldNotAvailableAfter, field.TypeTime)
	}
	if ou.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   occurrence.LocationTable,
			Columns: []string{occurrence.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   occurrence.LocationTable,
			Columns: []string{occurrence.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.DishCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   occurrence.DishTable,
			Columns: []string{occurrence.DishColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dish.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.DishIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   occurrence.DishTable,
			Columns: []string{occurrence.DishColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dish.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   occurrence.TagsTable,
			Columns: occurrence.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedTagsIDs(); len(nodes) > 0 && !ou.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   occurrence.TagsTable,
			Columns: occurrence.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   occurrence.TagsTable,
			Columns: occurrence.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.SideDishesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   occurrence.SideDishesTable,
			Columns: occurrence.SideDishesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dish.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedSideDishesIDs(); len(nodes) > 0 && !ou.mutation.SideDishesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   occurrence.SideDishesTable,
			Columns: occurrence.SideDishesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dish.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.SideDishesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   occurrence.SideDishesTable,
			Columns: occurrence.SideDishesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dish.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   occurrence.ReviewsTable,
			Columns: []string{occurrence.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !ou.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   occurrence.ReviewsTable,
			Columns: []string{occurrence.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   occurrence.ReviewsTable,
			Columns: []string{occurrence.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{occurrence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OccurrenceUpdateOne is the builder for updating a single Occurrence entity.
type OccurrenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OccurrenceMutation
}

// SetDate sets the "date" field.
func (ouo *OccurrenceUpdateOne) SetDate(t time.Time) *OccurrenceUpdateOne {
	ouo.mutation.SetDate(t)
	return ouo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillableDate(t *time.Time) *OccurrenceUpdateOne {
	if t != nil {
		ouo.SetDate(*t)
	}
	return ouo
}

// SetKj sets the "kj" field.
func (ouo *OccurrenceUpdateOne) SetKj(i int) *OccurrenceUpdateOne {
	ouo.mutation.ResetKj()
	ouo.mutation.SetKj(i)
	return ouo
}

// SetNillableKj sets the "kj" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillableKj(i *int) *OccurrenceUpdateOne {
	if i != nil {
		ouo.SetKj(*i)
	}
	return ouo
}

// AddKj adds i to the "kj" field.
func (ouo *OccurrenceUpdateOne) AddKj(i int) *OccurrenceUpdateOne {
	ouo.mutation.AddKj(i)
	return ouo
}

// ClearKj clears the value of the "kj" field.
func (ouo *OccurrenceUpdateOne) ClearKj() *OccurrenceUpdateOne {
	ouo.mutation.ClearKj()
	return ouo
}

// SetKcal sets the "kcal" field.
func (ouo *OccurrenceUpdateOne) SetKcal(i int) *OccurrenceUpdateOne {
	ouo.mutation.ResetKcal()
	ouo.mutation.SetKcal(i)
	return ouo
}

// SetNillableKcal sets the "kcal" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillableKcal(i *int) *OccurrenceUpdateOne {
	if i != nil {
		ouo.SetKcal(*i)
	}
	return ouo
}

// AddKcal adds i to the "kcal" field.
func (ouo *OccurrenceUpdateOne) AddKcal(i int) *OccurrenceUpdateOne {
	ouo.mutation.AddKcal(i)
	return ouo
}

// ClearKcal clears the value of the "kcal" field.
func (ouo *OccurrenceUpdateOne) ClearKcal() *OccurrenceUpdateOne {
	ouo.mutation.ClearKcal()
	return ouo
}

// SetFat sets the "fat" field.
func (ouo *OccurrenceUpdateOne) SetFat(i int) *OccurrenceUpdateOne {
	ouo.mutation.ResetFat()
	ouo.mutation.SetFat(i)
	return ouo
}

// SetNillableFat sets the "fat" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillableFat(i *int) *OccurrenceUpdateOne {
	if i != nil {
		ouo.SetFat(*i)
	}
	return ouo
}

// AddFat adds i to the "fat" field.
func (ouo *OccurrenceUpdateOne) AddFat(i int) *OccurrenceUpdateOne {
	ouo.mutation.AddFat(i)
	return ouo
}

// ClearFat clears the value of the "fat" field.
func (ouo *OccurrenceUpdateOne) ClearFat() *OccurrenceUpdateOne {
	ouo.mutation.ClearFat()
	return ouo
}

// SetSaturatedFat sets the "saturated_fat" field.
func (ouo *OccurrenceUpdateOne) SetSaturatedFat(i int) *OccurrenceUpdateOne {
	ouo.mutation.ResetSaturatedFat()
	ouo.mutation.SetSaturatedFat(i)
	return ouo
}

// SetNillableSaturatedFat sets the "saturated_fat" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillableSaturatedFat(i *int) *OccurrenceUpdateOne {
	if i != nil {
		ouo.SetSaturatedFat(*i)
	}
	return ouo
}

// AddSaturatedFat adds i to the "saturated_fat" field.
func (ouo *OccurrenceUpdateOne) AddSaturatedFat(i int) *OccurrenceUpdateOne {
	ouo.mutation.AddSaturatedFat(i)
	return ouo
}

// ClearSaturatedFat clears the value of the "saturated_fat" field.
func (ouo *OccurrenceUpdateOne) ClearSaturatedFat() *OccurrenceUpdateOne {
	ouo.mutation.ClearSaturatedFat()
	return ouo
}

// SetCarbohydrates sets the "carbohydrates" field.
func (ouo *OccurrenceUpdateOne) SetCarbohydrates(i int) *OccurrenceUpdateOne {
	ouo.mutation.ResetCarbohydrates()
	ouo.mutation.SetCarbohydrates(i)
	return ouo
}

// SetNillableCarbohydrates sets the "carbohydrates" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillableCarbohydrates(i *int) *OccurrenceUpdateOne {
	if i != nil {
		ouo.SetCarbohydrates(*i)
	}
	return ouo
}

// AddCarbohydrates adds i to the "carbohydrates" field.
func (ouo *OccurrenceUpdateOne) AddCarbohydrates(i int) *OccurrenceUpdateOne {
	ouo.mutation.AddCarbohydrates(i)
	return ouo
}

// ClearCarbohydrates clears the value of the "carbohydrates" field.
func (ouo *OccurrenceUpdateOne) ClearCarbohydrates() *OccurrenceUpdateOne {
	ouo.mutation.ClearCarbohydrates()
	return ouo
}

// SetSugar sets the "sugar" field.
func (ouo *OccurrenceUpdateOne) SetSugar(i int) *OccurrenceUpdateOne {
	ouo.mutation.ResetSugar()
	ouo.mutation.SetSugar(i)
	return ouo
}

// SetNillableSugar sets the "sugar" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillableSugar(i *int) *OccurrenceUpdateOne {
	if i != nil {
		ouo.SetSugar(*i)
	}
	return ouo
}

// AddSugar adds i to the "sugar" field.
func (ouo *OccurrenceUpdateOne) AddSugar(i int) *OccurrenceUpdateOne {
	ouo.mutation.AddSugar(i)
	return ouo
}

// ClearSugar clears the value of the "sugar" field.
func (ouo *OccurrenceUpdateOne) ClearSugar() *OccurrenceUpdateOne {
	ouo.mutation.ClearSugar()
	return ouo
}

// SetFiber sets the "fiber" field.
func (ouo *OccurrenceUpdateOne) SetFiber(i int) *OccurrenceUpdateOne {
	ouo.mutation.ResetFiber()
	ouo.mutation.SetFiber(i)
	return ouo
}

// SetNillableFiber sets the "fiber" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillableFiber(i *int) *OccurrenceUpdateOne {
	if i != nil {
		ouo.SetFiber(*i)
	}
	return ouo
}

// AddFiber adds i to the "fiber" field.
func (ouo *OccurrenceUpdateOne) AddFiber(i int) *OccurrenceUpdateOne {
	ouo.mutation.AddFiber(i)
	return ouo
}

// ClearFiber clears the value of the "fiber" field.
func (ouo *OccurrenceUpdateOne) ClearFiber() *OccurrenceUpdateOne {
	ouo.mutation.ClearFiber()
	return ouo
}

// SetProtein sets the "protein" field.
func (ouo *OccurrenceUpdateOne) SetProtein(i int) *OccurrenceUpdateOne {
	ouo.mutation.ResetProtein()
	ouo.mutation.SetProtein(i)
	return ouo
}

// SetNillableProtein sets the "protein" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillableProtein(i *int) *OccurrenceUpdateOne {
	if i != nil {
		ouo.SetProtein(*i)
	}
	return ouo
}

// AddProtein adds i to the "protein" field.
func (ouo *OccurrenceUpdateOne) AddProtein(i int) *OccurrenceUpdateOne {
	ouo.mutation.AddProtein(i)
	return ouo
}

// ClearProtein clears the value of the "protein" field.
func (ouo *OccurrenceUpdateOne) ClearProtein() *OccurrenceUpdateOne {
	ouo.mutation.ClearProtein()
	return ouo
}

// SetSalt sets the "salt" field.
func (ouo *OccurrenceUpdateOne) SetSalt(i int) *OccurrenceUpdateOne {
	ouo.mutation.ResetSalt()
	ouo.mutation.SetSalt(i)
	return ouo
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillableSalt(i *int) *OccurrenceUpdateOne {
	if i != nil {
		ouo.SetSalt(*i)
	}
	return ouo
}

// AddSalt adds i to the "salt" field.
func (ouo *OccurrenceUpdateOne) AddSalt(i int) *OccurrenceUpdateOne {
	ouo.mutation.AddSalt(i)
	return ouo
}

// ClearSalt clears the value of the "salt" field.
func (ouo *OccurrenceUpdateOne) ClearSalt() *OccurrenceUpdateOne {
	ouo.mutation.ClearSalt()
	return ouo
}

// SetPriceStudent sets the "price_student" field.
func (ouo *OccurrenceUpdateOne) SetPriceStudent(i int) *OccurrenceUpdateOne {
	ouo.mutation.ResetPriceStudent()
	ouo.mutation.SetPriceStudent(i)
	return ouo
}

// SetNillablePriceStudent sets the "price_student" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillablePriceStudent(i *int) *OccurrenceUpdateOne {
	if i != nil {
		ouo.SetPriceStudent(*i)
	}
	return ouo
}

// AddPriceStudent adds i to the "price_student" field.
func (ouo *OccurrenceUpdateOne) AddPriceStudent(i int) *OccurrenceUpdateOne {
	ouo.mutation.AddPriceStudent(i)
	return ouo
}

// ClearPriceStudent clears the value of the "price_student" field.
func (ouo *OccurrenceUpdateOne) ClearPriceStudent() *OccurrenceUpdateOne {
	ouo.mutation.ClearPriceStudent()
	return ouo
}

// SetPriceStaff sets the "price_staff" field.
func (ouo *OccurrenceUpdateOne) SetPriceStaff(i int) *OccurrenceUpdateOne {
	ouo.mutation.ResetPriceStaff()
	ouo.mutation.SetPriceStaff(i)
	return ouo
}

// SetNillablePriceStaff sets the "price_staff" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillablePriceStaff(i *int) *OccurrenceUpdateOne {
	if i != nil {
		ouo.SetPriceStaff(*i)
	}
	return ouo
}

// AddPriceStaff adds i to the "price_staff" field.
func (ouo *OccurrenceUpdateOne) AddPriceStaff(i int) *OccurrenceUpdateOne {
	ouo.mutation.AddPriceStaff(i)
	return ouo
}

// ClearPriceStaff clears the value of the "price_staff" field.
func (ouo *OccurrenceUpdateOne) ClearPriceStaff() *OccurrenceUpdateOne {
	ouo.mutation.ClearPriceStaff()
	return ouo
}

// SetPriceGuest sets the "price_guest" field.
func (ouo *OccurrenceUpdateOne) SetPriceGuest(i int) *OccurrenceUpdateOne {
	ouo.mutation.ResetPriceGuest()
	ouo.mutation.SetPriceGuest(i)
	return ouo
}

// SetNillablePriceGuest sets the "price_guest" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillablePriceGuest(i *int) *OccurrenceUpdateOne {
	if i != nil {
		ouo.SetPriceGuest(*i)
	}
	return ouo
}

// AddPriceGuest adds i to the "price_guest" field.
func (ouo *OccurrenceUpdateOne) AddPriceGuest(i int) *OccurrenceUpdateOne {
	ouo.mutation.AddPriceGuest(i)
	return ouo
}

// ClearPriceGuest clears the value of the "price_guest" field.
func (ouo *OccurrenceUpdateOne) ClearPriceGuest() *OccurrenceUpdateOne {
	ouo.mutation.ClearPriceGuest()
	return ouo
}

// SetNotAvailableAfter sets the "notAvailableAfter" field.
func (ouo *OccurrenceUpdateOne) SetNotAvailableAfter(t time.Time) *OccurrenceUpdateOne {
	ouo.mutation.SetNotAvailableAfter(t)
	return ouo
}

// SetNillableNotAvailableAfter sets the "notAvailableAfter" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillableNotAvailableAfter(t *time.Time) *OccurrenceUpdateOne {
	if t != nil {
		ouo.SetNotAvailableAfter(*t)
	}
	return ouo
}

// ClearNotAvailableAfter clears the value of the "notAvailableAfter" field.
func (ouo *OccurrenceUpdateOne) ClearNotAvailableAfter() *OccurrenceUpdateOne {
	ouo.mutation.ClearNotAvailableAfter()
	return ouo
}

// SetLocationID sets the "location" edge to the Location entity by ID.
func (ouo *OccurrenceUpdateOne) SetLocationID(id uuid.UUID) *OccurrenceUpdateOne {
	ouo.mutation.SetLocationID(id)
	return ouo
}

// SetLocation sets the "location" edge to the Location entity.
func (ouo *OccurrenceUpdateOne) SetLocation(l *Location) *OccurrenceUpdateOne {
	return ouo.SetLocationID(l.ID)
}

// SetDishID sets the "dish" edge to the Dish entity by ID.
func (ouo *OccurrenceUpdateOne) SetDishID(id uuid.UUID) *OccurrenceUpdateOne {
	ouo.mutation.SetDishID(id)
	return ouo
}

// SetDish sets the "dish" edge to the Dish entity.
func (ouo *OccurrenceUpdateOne) SetDish(d *Dish) *OccurrenceUpdateOne {
	return ouo.SetDishID(d.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (ouo *OccurrenceUpdateOne) AddTagIDs(ids ...string) *OccurrenceUpdateOne {
	ouo.mutation.AddTagIDs(ids...)
	return ouo
}

// AddTags adds the "tags" edges to the Tag entity.
func (ouo *OccurrenceUpdateOne) AddTags(t ...*Tag) *OccurrenceUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.AddTagIDs(ids...)
}

// AddSideDishIDs adds the "side_dishes" edge to the Dish entity by IDs.
func (ouo *OccurrenceUpdateOne) AddSideDishIDs(ids ...uuid.UUID) *OccurrenceUpdateOne {
	ouo.mutation.AddSideDishIDs(ids...)
	return ouo
}

// AddSideDishes adds the "side_dishes" edges to the Dish entity.
func (ouo *OccurrenceUpdateOne) AddSideDishes(d ...*Dish) *OccurrenceUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ouo.AddSideDishIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (ouo *OccurrenceUpdateOne) AddReviewIDs(ids ...uuid.UUID) *OccurrenceUpdateOne {
	ouo.mutation.AddReviewIDs(ids...)
	return ouo
}

// AddReviews adds the "reviews" edges to the Review entity.
func (ouo *OccurrenceUpdateOne) AddReviews(r ...*Review) *OccurrenceUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.AddReviewIDs(ids...)
}

// Mutation returns the OccurrenceMutation object of the builder.
func (ouo *OccurrenceUpdateOne) Mutation() *OccurrenceMutation {
	return ouo.mutation
}

// ClearLocation clears the "location" edge to the Location entity.
func (ouo *OccurrenceUpdateOne) ClearLocation() *OccurrenceUpdateOne {
	ouo.mutation.ClearLocation()
	return ouo
}

// ClearDish clears the "dish" edge to the Dish entity.
func (ouo *OccurrenceUpdateOne) ClearDish() *OccurrenceUpdateOne {
	ouo.mutation.ClearDish()
	return ouo
}

// ClearTags clears all "tags" edges to the Tag entity.
func (ouo *OccurrenceUpdateOne) ClearTags() *OccurrenceUpdateOne {
	ouo.mutation.ClearTags()
	return ouo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (ouo *OccurrenceUpdateOne) RemoveTagIDs(ids ...string) *OccurrenceUpdateOne {
	ouo.mutation.RemoveTagIDs(ids...)
	return ouo
}

// RemoveTags removes "tags" edges to Tag entities.
func (ouo *OccurrenceUpdateOne) RemoveTags(t ...*Tag) *OccurrenceUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.RemoveTagIDs(ids...)
}

// ClearSideDishes clears all "side_dishes" edges to the Dish entity.
func (ouo *OccurrenceUpdateOne) ClearSideDishes() *OccurrenceUpdateOne {
	ouo.mutation.ClearSideDishes()
	return ouo
}

// RemoveSideDishIDs removes the "side_dishes" edge to Dish entities by IDs.
func (ouo *OccurrenceUpdateOne) RemoveSideDishIDs(ids ...uuid.UUID) *OccurrenceUpdateOne {
	ouo.mutation.RemoveSideDishIDs(ids...)
	return ouo
}

// RemoveSideDishes removes "side_dishes" edges to Dish entities.
func (ouo *OccurrenceUpdateOne) RemoveSideDishes(d ...*Dish) *OccurrenceUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ouo.RemoveSideDishIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (ouo *OccurrenceUpdateOne) ClearReviews() *OccurrenceUpdateOne {
	ouo.mutation.ClearReviews()
	return ouo
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (ouo *OccurrenceUpdateOne) RemoveReviewIDs(ids ...uuid.UUID) *OccurrenceUpdateOne {
	ouo.mutation.RemoveReviewIDs(ids...)
	return ouo
}

// RemoveReviews removes "reviews" edges to Review entities.
func (ouo *OccurrenceUpdateOne) RemoveReviews(r ...*Review) *OccurrenceUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.RemoveReviewIDs(ids...)
}

// Where appends a list predicates to the OccurrenceUpdate builder.
func (ouo *OccurrenceUpdateOne) Where(ps ...predicate.Occurrence) *OccurrenceUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OccurrenceUpdateOne) Select(field string, fields ...string) *OccurrenceUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Occurrence entity.
func (ouo *OccurrenceUpdateOne) Save(ctx context.Context) (*Occurrence, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OccurrenceUpdateOne) SaveX(ctx context.Context) *Occurrence {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OccurrenceUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OccurrenceUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OccurrenceUpdateOne) check() error {
	if _, ok := ouo.mutation.LocationID(); ouo.mutation.LocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Occurrence.location"`)
	}
	if _, ok := ouo.mutation.DishID(); ouo.mutation.DishCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Occurrence.dish"`)
	}
	return nil
}

func (ouo *OccurrenceUpdateOne) sqlSave(ctx context.Context) (_node *Occurrence, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(occurrence.Table, occurrence.Columns, sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Occurrence.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, occurrence.FieldID)
		for _, f := range fields {
			if !occurrence.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != occurrence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Date(); ok {
		_spec.SetField(occurrence.FieldDate, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Kj(); ok {
		_spec.SetField(occurrence.FieldKj, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedKj(); ok {
		_spec.AddField(occurrence.FieldKj, field.TypeInt, value)
	}
	if ouo.mutation.KjCleared() {
		_spec.ClearField(occurrence.FieldKj, field.TypeInt)
	}
	if value, ok := ouo.mutation.Kcal(); ok {
		_spec.SetField(occurrence.FieldKcal, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedKcal(); ok {
		_spec.AddField(occurrence.FieldKcal, field.TypeInt, value)
	}
	if ouo.mutation.KcalCleared() {
		_spec.ClearField(occurrence.FieldKcal, field.TypeInt)
	}
	if value, ok := ouo.mutation.Fat(); ok {
		_spec.SetField(occurrence.FieldFat, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedFat(); ok {
		_spec.AddField(occurrence.FieldFat, field.TypeInt, value)
	}
	if ouo.mutation.FatCleared() {
		_spec.ClearField(occurrence.FieldFat, field.TypeInt)
	}
	if value, ok := ouo.mutation.SaturatedFat(); ok {
		_spec.SetField(occurrence.FieldSaturatedFat, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedSaturatedFat(); ok {
		_spec.AddField(occurrence.FieldSaturatedFat, field.TypeInt, value)
	}
	if ouo.mutation.SaturatedFatCleared() {
		_spec.ClearField(occurrence.FieldSaturatedFat, field.TypeInt)
	}
	if value, ok := ouo.mutation.Carbohydrates(); ok {
		_spec.SetField(occurrence.FieldCarbohydrates, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedCarbohydrates(); ok {
		_spec.AddField(occurrence.FieldCarbohydrates, field.TypeInt, value)
	}
	if ouo.mutation.CarbohydratesCleared() {
		_spec.ClearField(occurrence.FieldCarbohydrates, field.TypeInt)
	}
	if value, ok := ouo.mutation.Sugar(); ok {
		_spec.SetField(occurrence.FieldSugar, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedSugar(); ok {
		_spec.AddField(occurrence.FieldSugar, field.TypeInt, value)
	}
	if ouo.mutation.SugarCleared() {
		_spec.ClearField(occurrence.FieldSugar, field.TypeInt)
	}
	if value, ok := ouo.mutation.Fiber(); ok {
		_spec.SetField(occurrence.FieldFiber, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedFiber(); ok {
		_spec.AddField(occurrence.FieldFiber, field.TypeInt, value)
	}
	if ouo.mutation.FiberCleared() {
		_spec.ClearField(occurrence.FieldFiber, field.TypeInt)
	}
	if value, ok := ouo.mutation.Protein(); ok {
		_spec.SetField(occurrence.FieldProtein, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedProtein(); ok {
		_spec.AddField(occurrence.FieldProtein, field.TypeInt, value)
	}
	if ouo.mutation.ProteinCleared() {
		_spec.ClearField(occurrence.FieldProtein, field.TypeInt)
	}
	if value, ok := ouo.mutation.Salt(); ok {
		_spec.SetField(occurrence.FieldSalt, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedSalt(); ok {
		_spec.AddField(occurrence.FieldSalt, field.TypeInt, value)
	}
	if ouo.mutation.SaltCleared() {
		_spec.ClearField(occurrence.FieldSalt, field.TypeInt)
	}
	if value, ok := ouo.mutation.PriceStudent(); ok {
		_spec.SetField(occurrence.FieldPriceStudent, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedPriceStudent(); ok {
		_spec.AddField(occurrence.FieldPriceStudent, field.TypeInt, value)
	}
	if ouo.mutation.PriceStudentCleared() {
		_spec.ClearField(occurrence.FieldPriceStudent, field.TypeInt)
	}
	if value, ok := ouo.mutation.PriceStaff(); ok {
		_spec.SetField(occurrence.FieldPriceStaff, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedPriceStaff(); ok {
		_spec.AddField(occurrence.FieldPriceStaff, field.TypeInt, value)
	}
	if ouo.mutation.PriceStaffCleared() {
		_spec.ClearField(occurrence.FieldPriceStaff, field.TypeInt)
	}
	if value, ok := ouo.mutation.PriceGuest(); ok {
		_spec.SetField(occurrence.FieldPriceGuest, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedPriceGuest(); ok {
		_spec.AddField(occurrence.FieldPriceGuest, field.TypeInt, value)
	}
	if ouo.mutation.PriceGuestCleared() {
		_spec.ClearField(occurrence.FieldPriceGuest, field.TypeInt)
	}
	if value, ok := ouo.mutation.NotAvailableAfter(); ok {
		_spec.SetField(occurrence.FieldNotAvailableAfter, field.TypeTime, value)
	}
	if ouo.mutation.NotAvailableAfterCleared() {
		_spec.ClearField(occurrence.FieldNotAvailableAfter, field.TypeTime)
	}
	if ouo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   occurrence.LocationTable,
			Columns: []string{occurrence.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   occurrence.LocationTable,
			Columns: []string{occurrence.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.DishCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   occurrence.DishTable,
			Columns: []string{occurrence.DishColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dish.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.DishIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   occurrence.DishTable,
			Columns: []string{occurrence.DishColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dish.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   occurrence.TagsTable,
			Columns: occurrence.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !ouo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   occurrence.TagsTable,
			Columns: occurrence.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   occurrence.TagsTable,
			Columns: occurrence.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.SideDishesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   occurrence.SideDishesTable,
			Columns: occurrence.SideDishesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dish.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedSideDishesIDs(); len(nodes) > 0 && !ouo.mutation.SideDishesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   occurrence.SideDishesTable,
			Columns: occurrence.SideDishesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dish.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.SideDishesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   occurrence.SideDishesTable,
			Columns: occurrence.SideDishesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dish.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   occurrence.ReviewsTable,
			Columns: []string{occurrence.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !ouo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   occurrence.ReviewsTable,
			Columns: []string{occurrence.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   occurrence.ReviewsTable,
			Columns: []string{occurrence.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Occurrence{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{occurrence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
