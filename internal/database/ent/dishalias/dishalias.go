// Code generated by ent, DO NOT EDIT.

package dishalias

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the dishalias type in the database.
	Label = "dish_alias"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "alias_name"
	// FieldNormalizedAliasName holds the string denoting the normalized_alias_name field in the database.
	FieldNormalizedAliasName = "normalized_alias_name"
	// EdgeDish holds the string denoting the dish edge name in mutations.
	EdgeDish = "dish"
	// DishFieldID holds the string denoting the ID field of the Dish.
	DishFieldID = "id"
	// Table holds the table name of the dishalias in the database.
	Table = "dish_alias"
	// DishTable is the table that holds the dish relation/edge.
	DishTable = "dish_alias"
	// DishInverseTable is the table name for the Dish entity.
	// It exists in this package in order to avoid circular dependency with the "dish" package.
	DishInverseTable = "dish"
	// DishColumn is the table column denoting the dish relation/edge.
	DishColumn = "dish"
)

// Columns holds all SQL columns for dishalias fields.
var Columns = []string{
	FieldID,
	FieldNormalizedAliasName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "dish_alias"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"dish",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NormalizedAliasNameValidator is a validator for the "normalized_alias_name" field. It is called by the builders before save.
	NormalizedAliasNameValidator func(string) error
)

// OrderOption defines the ordering options for the DishAlias queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNormalizedAliasName orders the results by the normalized_alias_name field.
func ByNormalizedAliasName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNormalizedAliasName, opts...).ToFunc()
}

// ByDishField orders the results by dish field.
func ByDishField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDishStep(), sql.OrderByField(field, opts...))
	}
}
func newDishStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DishInverseTable, DishFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DishTable, DishColumn),
	)
}
