// Code generated by ent, DO NOT EDIT.

package dishalias

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mensatt/backend/internal/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldContainsFold(FieldID, id))
}

// NormalizedAliasName applies equality check predicate on the "normalized_alias_name" field. It's identical to NormalizedAliasNameEQ.
func NormalizedAliasName(v string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldEQ(FieldNormalizedAliasName, v))
}

// NormalizedAliasNameEQ applies the EQ predicate on the "normalized_alias_name" field.
func NormalizedAliasNameEQ(v string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldEQ(FieldNormalizedAliasName, v))
}

// NormalizedAliasNameNEQ applies the NEQ predicate on the "normalized_alias_name" field.
func NormalizedAliasNameNEQ(v string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldNEQ(FieldNormalizedAliasName, v))
}

// NormalizedAliasNameIn applies the In predicate on the "normalized_alias_name" field.
func NormalizedAliasNameIn(vs ...string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldIn(FieldNormalizedAliasName, vs...))
}

// NormalizedAliasNameNotIn applies the NotIn predicate on the "normalized_alias_name" field.
func NormalizedAliasNameNotIn(vs ...string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldNotIn(FieldNormalizedAliasName, vs...))
}

// NormalizedAliasNameGT applies the GT predicate on the "normalized_alias_name" field.
func NormalizedAliasNameGT(v string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldGT(FieldNormalizedAliasName, v))
}

// NormalizedAliasNameGTE applies the GTE predicate on the "normalized_alias_name" field.
func NormalizedAliasNameGTE(v string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldGTE(FieldNormalizedAliasName, v))
}

// NormalizedAliasNameLT applies the LT predicate on the "normalized_alias_name" field.
func NormalizedAliasNameLT(v string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldLT(FieldNormalizedAliasName, v))
}

// NormalizedAliasNameLTE applies the LTE predicate on the "normalized_alias_name" field.
func NormalizedAliasNameLTE(v string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldLTE(FieldNormalizedAliasName, v))
}

// NormalizedAliasNameContains applies the Contains predicate on the "normalized_alias_name" field.
func NormalizedAliasNameContains(v string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldContains(FieldNormalizedAliasName, v))
}

// NormalizedAliasNameHasPrefix applies the HasPrefix predicate on the "normalized_alias_name" field.
func NormalizedAliasNameHasPrefix(v string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldHasPrefix(FieldNormalizedAliasName, v))
}

// NormalizedAliasNameHasSuffix applies the HasSuffix predicate on the "normalized_alias_name" field.
func NormalizedAliasNameHasSuffix(v string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldHasSuffix(FieldNormalizedAliasName, v))
}

// NormalizedAliasNameEqualFold applies the EqualFold predicate on the "normalized_alias_name" field.
func NormalizedAliasNameEqualFold(v string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldEqualFold(FieldNormalizedAliasName, v))
}

// NormalizedAliasNameContainsFold applies the ContainsFold predicate on the "normalized_alias_name" field.
func NormalizedAliasNameContainsFold(v string) predicate.DishAlias {
	return predicate.DishAlias(sql.FieldContainsFold(FieldNormalizedAliasName, v))
}

// HasDish applies the HasEdge predicate on the "dish" edge.
func HasDish() predicate.DishAlias {
	return predicate.DishAlias(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DishTable, DishColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDishWith applies the HasEdge predicate on the "dish" edge with a given conditions (other predicates).
func HasDishWith(preds ...predicate.Dish) predicate.DishAlias {
	return predicate.DishAlias(func(s *sql.Selector) {
		step := newDishStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DishAlias) predicate.DishAlias {
	return predicate.DishAlias(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DishAlias) predicate.DishAlias {
	return predicate.DishAlias(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DishAlias) predicate.DishAlias {
	return predicate.DishAlias(sql.NotPredicates(p))
}
