// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mensatt/backend/internal/database/ent/dish"
	"github.com/mensatt/backend/internal/database/ent/location"
	"github.com/mensatt/backend/internal/database/ent/occurrence"
	"github.com/mensatt/backend/internal/database/ent/tag"
	"github.com/mensatt/backend/internal/database/schema"
)

// OccurrenceCreate is the builder for creating a Occurrence entity.
type OccurrenceCreate struct {
	config
	mutation *OccurrenceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDate sets the "date" field.
func (oc *OccurrenceCreate) SetDate(t time.Time) *OccurrenceCreate {
	oc.mutation.SetDate(t)
	return oc
}

// SetStatus sets the "status" field.
func (oc *OccurrenceCreate) SetStatus(ss schema.OccurrenceStatus) *OccurrenceCreate {
	oc.mutation.SetStatus(ss)
	return oc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oc *OccurrenceCreate) SetNillableStatus(ss *schema.OccurrenceStatus) *OccurrenceCreate {
	if ss != nil {
		oc.SetStatus(*ss)
	}
	return oc
}

// SetKj sets the "kj" field.
func (oc *OccurrenceCreate) SetKj(i int) *OccurrenceCreate {
	oc.mutation.SetKj(i)
	return oc
}

// SetKcal sets the "kcal" field.
func (oc *OccurrenceCreate) SetKcal(i int) *OccurrenceCreate {
	oc.mutation.SetKcal(i)
	return oc
}

// SetFat sets the "fat" field.
func (oc *OccurrenceCreate) SetFat(i int) *OccurrenceCreate {
	oc.mutation.SetFat(i)
	return oc
}

// SetSaturatedFat sets the "saturated_fat" field.
func (oc *OccurrenceCreate) SetSaturatedFat(i int) *OccurrenceCreate {
	oc.mutation.SetSaturatedFat(i)
	return oc
}

// SetCarbohydrates sets the "carbohydrates" field.
func (oc *OccurrenceCreate) SetCarbohydrates(i int) *OccurrenceCreate {
	oc.mutation.SetCarbohydrates(i)
	return oc
}

// SetSugar sets the "sugar" field.
func (oc *OccurrenceCreate) SetSugar(i int) *OccurrenceCreate {
	oc.mutation.SetSugar(i)
	return oc
}

// SetFiber sets the "fiber" field.
func (oc *OccurrenceCreate) SetFiber(i int) *OccurrenceCreate {
	oc.mutation.SetFiber(i)
	return oc
}

// SetProtein sets the "protein" field.
func (oc *OccurrenceCreate) SetProtein(i int) *OccurrenceCreate {
	oc.mutation.SetProtein(i)
	return oc
}

// SetSalt sets the "salt" field.
func (oc *OccurrenceCreate) SetSalt(i int) *OccurrenceCreate {
	oc.mutation.SetSalt(i)
	return oc
}

// SetPriceStudent sets the "price_student" field.
func (oc *OccurrenceCreate) SetPriceStudent(i int) *OccurrenceCreate {
	oc.mutation.SetPriceStudent(i)
	return oc
}

// SetPriceStaff sets the "price_staff" field.
func (oc *OccurrenceCreate) SetPriceStaff(i int) *OccurrenceCreate {
	oc.mutation.SetPriceStaff(i)
	return oc
}

// SetPriceGuest sets the "price_guest" field.
func (oc *OccurrenceCreate) SetPriceGuest(i int) *OccurrenceCreate {
	oc.mutation.SetPriceGuest(i)
	return oc
}

// SetID sets the "id" field.
func (oc *OccurrenceCreate) SetID(u uuid.UUID) *OccurrenceCreate {
	oc.mutation.SetID(u)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OccurrenceCreate) SetNillableID(u *uuid.UUID) *OccurrenceCreate {
	if u != nil {
		oc.SetID(*u)
	}
	return oc
}

// SetLocationID sets the "location" edge to the Location entity by ID.
func (oc *OccurrenceCreate) SetLocationID(id uuid.UUID) *OccurrenceCreate {
	oc.mutation.SetLocationID(id)
	return oc
}

// SetNillableLocationID sets the "location" edge to the Location entity by ID if the given value is not nil.
func (oc *OccurrenceCreate) SetNillableLocationID(id *uuid.UUID) *OccurrenceCreate {
	if id != nil {
		oc = oc.SetLocationID(*id)
	}
	return oc
}

// SetLocation sets the "location" edge to the Location entity.
func (oc *OccurrenceCreate) SetLocation(l *Location) *OccurrenceCreate {
	return oc.SetLocationID(l.ID)
}

// SetDishID sets the "dish" edge to the Dish entity by ID.
func (oc *OccurrenceCreate) SetDishID(id uuid.UUID) *OccurrenceCreate {
	oc.mutation.SetDishID(id)
	return oc
}

// SetNillableDishID sets the "dish" edge to the Dish entity by ID if the given value is not nil.
func (oc *OccurrenceCreate) SetNillableDishID(id *uuid.UUID) *OccurrenceCreate {
	if id != nil {
		oc = oc.SetDishID(*id)
	}
	return oc
}

// SetDish sets the "dish" edge to the Dish entity.
func (oc *OccurrenceCreate) SetDish(d *Dish) *OccurrenceCreate {
	return oc.SetDishID(d.ID)
}

// AddSideDishIDs adds the "side_dishes" edge to the Dish entity by IDs.
func (oc *OccurrenceCreate) AddSideDishIDs(ids ...uuid.UUID) *OccurrenceCreate {
	oc.mutation.AddSideDishIDs(ids...)
	return oc
}

// AddSideDishes adds the "side_dishes" edges to the Dish entity.
func (oc *OccurrenceCreate) AddSideDishes(d ...*Dish) *OccurrenceCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return oc.AddSideDishIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (oc *OccurrenceCreate) AddTagIDs(ids ...int) *OccurrenceCreate {
	oc.mutation.AddTagIDs(ids...)
	return oc
}

// AddTags adds the "tags" edges to the Tag entity.
func (oc *OccurrenceCreate) AddTags(t ...*Tag) *OccurrenceCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oc.AddTagIDs(ids...)
}

// Mutation returns the OccurrenceMutation object of the builder.
func (oc *OccurrenceCreate) Mutation() *OccurrenceMutation {
	return oc.mutation
}

// Save creates the Occurrence in the database.
func (oc *OccurrenceCreate) Save(ctx context.Context) (*Occurrence, error) {
	var (
		err  error
		node *Occurrence
	)
	oc.defaults()
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OccurrenceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			if node, err = oc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			if oc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Occurrence)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OccurrenceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OccurrenceCreate) SaveX(ctx context.Context) *Occurrence {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OccurrenceCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OccurrenceCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OccurrenceCreate) defaults() {
	if _, ok := oc.mutation.Status(); !ok {
		v := occurrence.DefaultStatus
		oc.mutation.SetStatus(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := occurrence.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OccurrenceCreate) check() error {
	if _, ok := oc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Occurrence.date"`)}
	}
	if _, ok := oc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Occurrence.status"`)}
	}
	if v, ok := oc.mutation.Status(); ok {
		if err := occurrence.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Occurrence.status": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Kj(); !ok {
		return &ValidationError{Name: "kj", err: errors.New(`ent: missing required field "Occurrence.kj"`)}
	}
	if _, ok := oc.mutation.Kcal(); !ok {
		return &ValidationError{Name: "kcal", err: errors.New(`ent: missing required field "Occurrence.kcal"`)}
	}
	if _, ok := oc.mutation.Fat(); !ok {
		return &ValidationError{Name: "fat", err: errors.New(`ent: missing required field "Occurrence.fat"`)}
	}
	if _, ok := oc.mutation.SaturatedFat(); !ok {
		return &ValidationError{Name: "saturated_fat", err: errors.New(`ent: missing required field "Occurrence.saturated_fat"`)}
	}
	if _, ok := oc.mutation.Carbohydrates(); !ok {
		return &ValidationError{Name: "carbohydrates", err: errors.New(`ent: missing required field "Occurrence.carbohydrates"`)}
	}
	if _, ok := oc.mutation.Sugar(); !ok {
		return &ValidationError{Name: "sugar", err: errors.New(`ent: missing required field "Occurrence.sugar"`)}
	}
	if _, ok := oc.mutation.Fiber(); !ok {
		return &ValidationError{Name: "fiber", err: errors.New(`ent: missing required field "Occurrence.fiber"`)}
	}
	if _, ok := oc.mutation.Protein(); !ok {
		return &ValidationError{Name: "protein", err: errors.New(`ent: missing required field "Occurrence.protein"`)}
	}
	if _, ok := oc.mutation.Salt(); !ok {
		return &ValidationError{Name: "salt", err: errors.New(`ent: missing required field "Occurrence.salt"`)}
	}
	if _, ok := oc.mutation.PriceStudent(); !ok {
		return &ValidationError{Name: "price_student", err: errors.New(`ent: missing required field "Occurrence.price_student"`)}
	}
	if _, ok := oc.mutation.PriceStaff(); !ok {
		return &ValidationError{Name: "price_staff", err: errors.New(`ent: missing required field "Occurrence.price_staff"`)}
	}
	if _, ok := oc.mutation.PriceGuest(); !ok {
		return &ValidationError{Name: "price_guest", err: errors.New(`ent: missing required field "Occurrence.price_guest"`)}
	}
	return nil
}

func (oc *OccurrenceCreate) sqlSave(ctx context.Context) (*Occurrence, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (oc *OccurrenceCreate) createSpec() (*Occurrence, *sqlgraph.CreateSpec) {
	var (
		_node = &Occurrence{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: occurrence.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: occurrence.FieldID,
			},
		}
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.Date(); ok {
		_spec.SetField(occurrence.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.SetField(occurrence.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := oc.mutation.Kj(); ok {
		_spec.SetField(occurrence.FieldKj, field.TypeInt, value)
		_node.Kj = value
	}
	if value, ok := oc.mutation.Kcal(); ok {
		_spec.SetField(occurrence.FieldKcal, field.TypeInt, value)
		_node.Kcal = value
	}
	if value, ok := oc.mutation.Fat(); ok {
		_spec.SetField(occurrence.FieldFat, field.TypeInt, value)
		_node.Fat = value
	}
	if value, ok := oc.mutation.SaturatedFat(); ok {
		_spec.SetField(occurrence.FieldSaturatedFat, field.TypeInt, value)
		_node.SaturatedFat = value
	}
	if value, ok := oc.mutation.Carbohydrates(); ok {
		_spec.SetField(occurrence.FieldCarbohydrates, field.TypeInt, value)
		_node.Carbohydrates = value
	}
	if value, ok := oc.mutation.Sugar(); ok {
		_spec.SetField(occurrence.FieldSugar, field.TypeInt, value)
		_node.Sugar = value
	}
	if value, ok := oc.mutation.Fiber(); ok {
		_spec.SetField(occurrence.FieldFiber, field.TypeInt, value)
		_node.Fiber = value
	}
	if value, ok := oc.mutation.Protein(); ok {
		_spec.SetField(occurrence.FieldProtein, field.TypeInt, value)
		_node.Protein = value
	}
	if value, ok := oc.mutation.Salt(); ok {
		_spec.SetField(occurrence.FieldSalt, field.TypeInt, value)
		_node.Salt = value
	}
	if value, ok := oc.mutation.PriceStudent(); ok {
		_spec.SetField(occurrence.FieldPriceStudent, field.TypeInt, value)
		_node.PriceStudent = value
	}
	if value, ok := oc.mutation.PriceStaff(); ok {
		_spec.SetField(occurrence.FieldPriceStaff, field.TypeInt, value)
		_node.PriceStaff = value
	}
	if value, ok := oc.mutation.PriceGuest(); ok {
		_spec.SetField(occurrence.FieldPriceGuest, field.TypeInt, value)
		_node.PriceGuest = value
	}
	if nodes := oc.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurrence.LocationTable,
			Columns: []string{occurrence.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.occurrence_location = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.DishIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurrence.DishTable,
			Columns: []string{occurrence.DishColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dish.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.occurrence_dish = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.SideDishesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   occurrence.SideDishesTable,
			Columns: []string{occurrence.SideDishesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dish.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   occurrence.TagsTable,
			Columns: []string{occurrence.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Occurrence.Create().
//		SetDate(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OccurrenceUpsert) {
//			SetDate(v+v).
//		}).
//		Exec(ctx)
func (oc *OccurrenceCreate) OnConflict(opts ...sql.ConflictOption) *OccurrenceUpsertOne {
	oc.conflict = opts
	return &OccurrenceUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Occurrence.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OccurrenceCreate) OnConflictColumns(columns ...string) *OccurrenceUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OccurrenceUpsertOne{
		create: oc,
	}
}

type (
	// OccurrenceUpsertOne is the builder for "upsert"-ing
	//  one Occurrence node.
	OccurrenceUpsertOne struct {
		create *OccurrenceCreate
	}

	// OccurrenceUpsert is the "OnConflict" setter.
	OccurrenceUpsert struct {
		*sql.UpdateSet
	}
)

// SetDate sets the "date" field.
func (u *OccurrenceUpsert) SetDate(v time.Time) *OccurrenceUpsert {
	u.Set(occurrence.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *OccurrenceUpsert) UpdateDate() *OccurrenceUpsert {
	u.SetExcluded(occurrence.FieldDate)
	return u
}

// SetStatus sets the "status" field.
func (u *OccurrenceUpsert) SetStatus(v schema.OccurrenceStatus) *OccurrenceUpsert {
	u.Set(occurrence.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OccurrenceUpsert) UpdateStatus() *OccurrenceUpsert {
	u.SetExcluded(occurrence.FieldStatus)
	return u
}

// SetKj sets the "kj" field.
func (u *OccurrenceUpsert) SetKj(v int) *OccurrenceUpsert {
	u.Set(occurrence.FieldKj, v)
	return u
}

// UpdateKj sets the "kj" field to the value that was provided on create.
func (u *OccurrenceUpsert) UpdateKj() *OccurrenceUpsert {
	u.SetExcluded(occurrence.FieldKj)
	return u
}

// AddKj adds v to the "kj" field.
func (u *OccurrenceUpsert) AddKj(v int) *OccurrenceUpsert {
	u.Add(occurrence.FieldKj, v)
	return u
}

// SetKcal sets the "kcal" field.
func (u *OccurrenceUpsert) SetKcal(v int) *OccurrenceUpsert {
	u.Set(occurrence.FieldKcal, v)
	return u
}

// UpdateKcal sets the "kcal" field to the value that was provided on create.
func (u *OccurrenceUpsert) UpdateKcal() *OccurrenceUpsert {
	u.SetExcluded(occurrence.FieldKcal)
	return u
}

// AddKcal adds v to the "kcal" field.
func (u *OccurrenceUpsert) AddKcal(v int) *OccurrenceUpsert {
	u.Add(occurrence.FieldKcal, v)
	return u
}

// SetFat sets the "fat" field.
func (u *OccurrenceUpsert) SetFat(v int) *OccurrenceUpsert {
	u.Set(occurrence.FieldFat, v)
	return u
}

// UpdateFat sets the "fat" field to the value that was provided on create.
func (u *OccurrenceUpsert) UpdateFat() *OccurrenceUpsert {
	u.SetExcluded(occurrence.FieldFat)
	return u
}

// AddFat adds v to the "fat" field.
func (u *OccurrenceUpsert) AddFat(v int) *OccurrenceUpsert {
	u.Add(occurrence.FieldFat, v)
	return u
}

// SetSaturatedFat sets the "saturated_fat" field.
func (u *OccurrenceUpsert) SetSaturatedFat(v int) *OccurrenceUpsert {
	u.Set(occurrence.FieldSaturatedFat, v)
	return u
}

// UpdateSaturatedFat sets the "saturated_fat" field to the value that was provided on create.
func (u *OccurrenceUpsert) UpdateSaturatedFat() *OccurrenceUpsert {
	u.SetExcluded(occurrence.FieldSaturatedFat)
	return u
}

// AddSaturatedFat adds v to the "saturated_fat" field.
func (u *OccurrenceUpsert) AddSaturatedFat(v int) *OccurrenceUpsert {
	u.Add(occurrence.FieldSaturatedFat, v)
	return u
}

// SetCarbohydrates sets the "carbohydrates" field.
func (u *OccurrenceUpsert) SetCarbohydrates(v int) *OccurrenceUpsert {
	u.Set(occurrence.FieldCarbohydrates, v)
	return u
}

// UpdateCarbohydrates sets the "carbohydrates" field to the value that was provided on create.
func (u *OccurrenceUpsert) UpdateCarbohydrates() *OccurrenceUpsert {
	u.SetExcluded(occurrence.FieldCarbohydrates)
	return u
}

// AddCarbohydrates adds v to the "carbohydrates" field.
func (u *OccurrenceUpsert) AddCarbohydrates(v int) *OccurrenceUpsert {
	u.Add(occurrence.FieldCarbohydrates, v)
	return u
}

// SetSugar sets the "sugar" field.
func (u *OccurrenceUpsert) SetSugar(v int) *OccurrenceUpsert {
	u.Set(occurrence.FieldSugar, v)
	return u
}

// UpdateSugar sets the "sugar" field to the value that was provided on create.
func (u *OccurrenceUpsert) UpdateSugar() *OccurrenceUpsert {
	u.SetExcluded(occurrence.FieldSugar)
	return u
}

// AddSugar adds v to the "sugar" field.
func (u *OccurrenceUpsert) AddSugar(v int) *OccurrenceUpsert {
	u.Add(occurrence.FieldSugar, v)
	return u
}

// SetFiber sets the "fiber" field.
func (u *OccurrenceUpsert) SetFiber(v int) *OccurrenceUpsert {
	u.Set(occurrence.FieldFiber, v)
	return u
}

// UpdateFiber sets the "fiber" field to the value that was provided on create.
func (u *OccurrenceUpsert) UpdateFiber() *OccurrenceUpsert {
	u.SetExcluded(occurrence.FieldFiber)
	return u
}

// AddFiber adds v to the "fiber" field.
func (u *OccurrenceUpsert) AddFiber(v int) *OccurrenceUpsert {
	u.Add(occurrence.FieldFiber, v)
	return u
}

// SetProtein sets the "protein" field.
func (u *OccurrenceUpsert) SetProtein(v int) *OccurrenceUpsert {
	u.Set(occurrence.FieldProtein, v)
	return u
}

// UpdateProtein sets the "protein" field to the value that was provided on create.
func (u *OccurrenceUpsert) UpdateProtein() *OccurrenceUpsert {
	u.SetExcluded(occurrence.FieldProtein)
	return u
}

// AddProtein adds v to the "protein" field.
func (u *OccurrenceUpsert) AddProtein(v int) *OccurrenceUpsert {
	u.Add(occurrence.FieldProtein, v)
	return u
}

// SetSalt sets the "salt" field.
func (u *OccurrenceUpsert) SetSalt(v int) *OccurrenceUpsert {
	u.Set(occurrence.FieldSalt, v)
	return u
}

// UpdateSalt sets the "salt" field to the value that was provided on create.
func (u *OccurrenceUpsert) UpdateSalt() *OccurrenceUpsert {
	u.SetExcluded(occurrence.FieldSalt)
	return u
}

// AddSalt adds v to the "salt" field.
func (u *OccurrenceUpsert) AddSalt(v int) *OccurrenceUpsert {
	u.Add(occurrence.FieldSalt, v)
	return u
}

// SetPriceStudent sets the "price_student" field.
func (u *OccurrenceUpsert) SetPriceStudent(v int) *OccurrenceUpsert {
	u.Set(occurrence.FieldPriceStudent, v)
	return u
}

// UpdatePriceStudent sets the "price_student" field to the value that was provided on create.
func (u *OccurrenceUpsert) UpdatePriceStudent() *OccurrenceUpsert {
	u.SetExcluded(occurrence.FieldPriceStudent)
	return u
}

// AddPriceStudent adds v to the "price_student" field.
func (u *OccurrenceUpsert) AddPriceStudent(v int) *OccurrenceUpsert {
	u.Add(occurrence.FieldPriceStudent, v)
	return u
}

// SetPriceStaff sets the "price_staff" field.
func (u *OccurrenceUpsert) SetPriceStaff(v int) *OccurrenceUpsert {
	u.Set(occurrence.FieldPriceStaff, v)
	return u
}

// UpdatePriceStaff sets the "price_staff" field to the value that was provided on create.
func (u *OccurrenceUpsert) UpdatePriceStaff() *OccurrenceUpsert {
	u.SetExcluded(occurrence.FieldPriceStaff)
	return u
}

// AddPriceStaff adds v to the "price_staff" field.
func (u *OccurrenceUpsert) AddPriceStaff(v int) *OccurrenceUpsert {
	u.Add(occurrence.FieldPriceStaff, v)
	return u
}

// SetPriceGuest sets the "price_guest" field.
func (u *OccurrenceUpsert) SetPriceGuest(v int) *OccurrenceUpsert {
	u.Set(occurrence.FieldPriceGuest, v)
	return u
}

// UpdatePriceGuest sets the "price_guest" field to the value that was provided on create.
func (u *OccurrenceUpsert) UpdatePriceGuest() *OccurrenceUpsert {
	u.SetExcluded(occurrence.FieldPriceGuest)
	return u
}

// AddPriceGuest adds v to the "price_guest" field.
func (u *OccurrenceUpsert) AddPriceGuest(v int) *OccurrenceUpsert {
	u.Add(occurrence.FieldPriceGuest, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Occurrence.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(occurrence.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OccurrenceUpsertOne) UpdateNewValues() *OccurrenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(occurrence.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Occurrence.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OccurrenceUpsertOne) Ignore() *OccurrenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OccurrenceUpsertOne) DoNothing() *OccurrenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OccurrenceCreate.OnConflict
// documentation for more info.
func (u *OccurrenceUpsertOne) Update(set func(*OccurrenceUpsert)) *OccurrenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OccurrenceUpsert{UpdateSet: update})
	}))
	return u
}

// SetDate sets the "date" field.
func (u *OccurrenceUpsertOne) SetDate(v time.Time) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *OccurrenceUpsertOne) UpdateDate() *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateDate()
	})
}

// SetStatus sets the "status" field.
func (u *OccurrenceUpsertOne) SetStatus(v schema.OccurrenceStatus) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OccurrenceUpsertOne) UpdateStatus() *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateStatus()
	})
}

// SetKj sets the "kj" field.
func (u *OccurrenceUpsertOne) SetKj(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetKj(v)
	})
}

// AddKj adds v to the "kj" field.
func (u *OccurrenceUpsertOne) AddKj(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddKj(v)
	})
}

// UpdateKj sets the "kj" field to the value that was provided on create.
func (u *OccurrenceUpsertOne) UpdateKj() *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateKj()
	})
}

// SetKcal sets the "kcal" field.
func (u *OccurrenceUpsertOne) SetKcal(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetKcal(v)
	})
}

// AddKcal adds v to the "kcal" field.
func (u *OccurrenceUpsertOne) AddKcal(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddKcal(v)
	})
}

// UpdateKcal sets the "kcal" field to the value that was provided on create.
func (u *OccurrenceUpsertOne) UpdateKcal() *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateKcal()
	})
}

// SetFat sets the "fat" field.
func (u *OccurrenceUpsertOne) SetFat(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetFat(v)
	})
}

// AddFat adds v to the "fat" field.
func (u *OccurrenceUpsertOne) AddFat(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddFat(v)
	})
}

// UpdateFat sets the "fat" field to the value that was provided on create.
func (u *OccurrenceUpsertOne) UpdateFat() *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateFat()
	})
}

// SetSaturatedFat sets the "saturated_fat" field.
func (u *OccurrenceUpsertOne) SetSaturatedFat(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetSaturatedFat(v)
	})
}

// AddSaturatedFat adds v to the "saturated_fat" field.
func (u *OccurrenceUpsertOne) AddSaturatedFat(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddSaturatedFat(v)
	})
}

// UpdateSaturatedFat sets the "saturated_fat" field to the value that was provided on create.
func (u *OccurrenceUpsertOne) UpdateSaturatedFat() *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateSaturatedFat()
	})
}

// SetCarbohydrates sets the "carbohydrates" field.
func (u *OccurrenceUpsertOne) SetCarbohydrates(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetCarbohydrates(v)
	})
}

// AddCarbohydrates adds v to the "carbohydrates" field.
func (u *OccurrenceUpsertOne) AddCarbohydrates(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddCarbohydrates(v)
	})
}

// UpdateCarbohydrates sets the "carbohydrates" field to the value that was provided on create.
func (u *OccurrenceUpsertOne) UpdateCarbohydrates() *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateCarbohydrates()
	})
}

// SetSugar sets the "sugar" field.
func (u *OccurrenceUpsertOne) SetSugar(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetSugar(v)
	})
}

// AddSugar adds v to the "sugar" field.
func (u *OccurrenceUpsertOne) AddSugar(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddSugar(v)
	})
}

// UpdateSugar sets the "sugar" field to the value that was provided on create.
func (u *OccurrenceUpsertOne) UpdateSugar() *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateSugar()
	})
}

// SetFiber sets the "fiber" field.
func (u *OccurrenceUpsertOne) SetFiber(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetFiber(v)
	})
}

// AddFiber adds v to the "fiber" field.
func (u *OccurrenceUpsertOne) AddFiber(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddFiber(v)
	})
}

// UpdateFiber sets the "fiber" field to the value that was provided on create.
func (u *OccurrenceUpsertOne) UpdateFiber() *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateFiber()
	})
}

// SetProtein sets the "protein" field.
func (u *OccurrenceUpsertOne) SetProtein(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetProtein(v)
	})
}

// AddProtein adds v to the "protein" field.
func (u *OccurrenceUpsertOne) AddProtein(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddProtein(v)
	})
}

// UpdateProtein sets the "protein" field to the value that was provided on create.
func (u *OccurrenceUpsertOne) UpdateProtein() *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateProtein()
	})
}

// SetSalt sets the "salt" field.
func (u *OccurrenceUpsertOne) SetSalt(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetSalt(v)
	})
}

// AddSalt adds v to the "salt" field.
func (u *OccurrenceUpsertOne) AddSalt(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddSalt(v)
	})
}

// UpdateSalt sets the "salt" field to the value that was provided on create.
func (u *OccurrenceUpsertOne) UpdateSalt() *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateSalt()
	})
}

// SetPriceStudent sets the "price_student" field.
func (u *OccurrenceUpsertOne) SetPriceStudent(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetPriceStudent(v)
	})
}

// AddPriceStudent adds v to the "price_student" field.
func (u *OccurrenceUpsertOne) AddPriceStudent(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddPriceStudent(v)
	})
}

// UpdatePriceStudent sets the "price_student" field to the value that was provided on create.
func (u *OccurrenceUpsertOne) UpdatePriceStudent() *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdatePriceStudent()
	})
}

// SetPriceStaff sets the "price_staff" field.
func (u *OccurrenceUpsertOne) SetPriceStaff(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetPriceStaff(v)
	})
}

// AddPriceStaff adds v to the "price_staff" field.
func (u *OccurrenceUpsertOne) AddPriceStaff(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddPriceStaff(v)
	})
}

// UpdatePriceStaff sets the "price_staff" field to the value that was provided on create.
func (u *OccurrenceUpsertOne) UpdatePriceStaff() *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdatePriceStaff()
	})
}

// SetPriceGuest sets the "price_guest" field.
func (u *OccurrenceUpsertOne) SetPriceGuest(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetPriceGuest(v)
	})
}

// AddPriceGuest adds v to the "price_guest" field.
func (u *OccurrenceUpsertOne) AddPriceGuest(v int) *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddPriceGuest(v)
	})
}

// UpdatePriceGuest sets the "price_guest" field to the value that was provided on create.
func (u *OccurrenceUpsertOne) UpdatePriceGuest() *OccurrenceUpsertOne {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdatePriceGuest()
	})
}

// Exec executes the query.
func (u *OccurrenceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OccurrenceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OccurrenceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OccurrenceUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OccurrenceUpsertOne.ID is not supported by MySQL driver. Use OccurrenceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OccurrenceUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OccurrenceCreateBulk is the builder for creating many Occurrence entities in bulk.
type OccurrenceCreateBulk struct {
	config
	builders []*OccurrenceCreate
	conflict []sql.ConflictOption
}

// Save creates the Occurrence entities in the database.
func (ocb *OccurrenceCreateBulk) Save(ctx context.Context) ([]*Occurrence, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Occurrence, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OccurrenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OccurrenceCreateBulk) SaveX(ctx context.Context) []*Occurrence {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OccurrenceCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OccurrenceCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Occurrence.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OccurrenceUpsert) {
//			SetDate(v+v).
//		}).
//		Exec(ctx)
func (ocb *OccurrenceCreateBulk) OnConflict(opts ...sql.ConflictOption) *OccurrenceUpsertBulk {
	ocb.conflict = opts
	return &OccurrenceUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Occurrence.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OccurrenceCreateBulk) OnConflictColumns(columns ...string) *OccurrenceUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OccurrenceUpsertBulk{
		create: ocb,
	}
}

// OccurrenceUpsertBulk is the builder for "upsert"-ing
// a bulk of Occurrence nodes.
type OccurrenceUpsertBulk struct {
	create *OccurrenceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Occurrence.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(occurrence.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OccurrenceUpsertBulk) UpdateNewValues() *OccurrenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(occurrence.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Occurrence.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OccurrenceUpsertBulk) Ignore() *OccurrenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OccurrenceUpsertBulk) DoNothing() *OccurrenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OccurrenceCreateBulk.OnConflict
// documentation for more info.
func (u *OccurrenceUpsertBulk) Update(set func(*OccurrenceUpsert)) *OccurrenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OccurrenceUpsert{UpdateSet: update})
	}))
	return u
}

// SetDate sets the "date" field.
func (u *OccurrenceUpsertBulk) SetDate(v time.Time) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *OccurrenceUpsertBulk) UpdateDate() *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateDate()
	})
}

// SetStatus sets the "status" field.
func (u *OccurrenceUpsertBulk) SetStatus(v schema.OccurrenceStatus) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OccurrenceUpsertBulk) UpdateStatus() *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateStatus()
	})
}

// SetKj sets the "kj" field.
func (u *OccurrenceUpsertBulk) SetKj(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetKj(v)
	})
}

// AddKj adds v to the "kj" field.
func (u *OccurrenceUpsertBulk) AddKj(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddKj(v)
	})
}

// UpdateKj sets the "kj" field to the value that was provided on create.
func (u *OccurrenceUpsertBulk) UpdateKj() *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateKj()
	})
}

// SetKcal sets the "kcal" field.
func (u *OccurrenceUpsertBulk) SetKcal(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetKcal(v)
	})
}

// AddKcal adds v to the "kcal" field.
func (u *OccurrenceUpsertBulk) AddKcal(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddKcal(v)
	})
}

// UpdateKcal sets the "kcal" field to the value that was provided on create.
func (u *OccurrenceUpsertBulk) UpdateKcal() *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateKcal()
	})
}

// SetFat sets the "fat" field.
func (u *OccurrenceUpsertBulk) SetFat(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetFat(v)
	})
}

// AddFat adds v to the "fat" field.
func (u *OccurrenceUpsertBulk) AddFat(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddFat(v)
	})
}

// UpdateFat sets the "fat" field to the value that was provided on create.
func (u *OccurrenceUpsertBulk) UpdateFat() *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateFat()
	})
}

// SetSaturatedFat sets the "saturated_fat" field.
func (u *OccurrenceUpsertBulk) SetSaturatedFat(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetSaturatedFat(v)
	})
}

// AddSaturatedFat adds v to the "saturated_fat" field.
func (u *OccurrenceUpsertBulk) AddSaturatedFat(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddSaturatedFat(v)
	})
}

// UpdateSaturatedFat sets the "saturated_fat" field to the value that was provided on create.
func (u *OccurrenceUpsertBulk) UpdateSaturatedFat() *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateSaturatedFat()
	})
}

// SetCarbohydrates sets the "carbohydrates" field.
func (u *OccurrenceUpsertBulk) SetCarbohydrates(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetCarbohydrates(v)
	})
}

// AddCarbohydrates adds v to the "carbohydrates" field.
func (u *OccurrenceUpsertBulk) AddCarbohydrates(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddCarbohydrates(v)
	})
}

// UpdateCarbohydrates sets the "carbohydrates" field to the value that was provided on create.
func (u *OccurrenceUpsertBulk) UpdateCarbohydrates() *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateCarbohydrates()
	})
}

// SetSugar sets the "sugar" field.
func (u *OccurrenceUpsertBulk) SetSugar(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetSugar(v)
	})
}

// AddSugar adds v to the "sugar" field.
func (u *OccurrenceUpsertBulk) AddSugar(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddSugar(v)
	})
}

// UpdateSugar sets the "sugar" field to the value that was provided on create.
func (u *OccurrenceUpsertBulk) UpdateSugar() *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateSugar()
	})
}

// SetFiber sets the "fiber" field.
func (u *OccurrenceUpsertBulk) SetFiber(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetFiber(v)
	})
}

// AddFiber adds v to the "fiber" field.
func (u *OccurrenceUpsertBulk) AddFiber(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddFiber(v)
	})
}

// UpdateFiber sets the "fiber" field to the value that was provided on create.
func (u *OccurrenceUpsertBulk) UpdateFiber() *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateFiber()
	})
}

// SetProtein sets the "protein" field.
func (u *OccurrenceUpsertBulk) SetProtein(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetProtein(v)
	})
}

// AddProtein adds v to the "protein" field.
func (u *OccurrenceUpsertBulk) AddProtein(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddProtein(v)
	})
}

// UpdateProtein sets the "protein" field to the value that was provided on create.
func (u *OccurrenceUpsertBulk) UpdateProtein() *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateProtein()
	})
}

// SetSalt sets the "salt" field.
func (u *OccurrenceUpsertBulk) SetSalt(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetSalt(v)
	})
}

// AddSalt adds v to the "salt" field.
func (u *OccurrenceUpsertBulk) AddSalt(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddSalt(v)
	})
}

// UpdateSalt sets the "salt" field to the value that was provided on create.
func (u *OccurrenceUpsertBulk) UpdateSalt() *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdateSalt()
	})
}

// SetPriceStudent sets the "price_student" field.
func (u *OccurrenceUpsertBulk) SetPriceStudent(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetPriceStudent(v)
	})
}

// AddPriceStudent adds v to the "price_student" field.
func (u *OccurrenceUpsertBulk) AddPriceStudent(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddPriceStudent(v)
	})
}

// UpdatePriceStudent sets the "price_student" field to the value that was provided on create.
func (u *OccurrenceUpsertBulk) UpdatePriceStudent() *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdatePriceStudent()
	})
}

// SetPriceStaff sets the "price_staff" field.
func (u *OccurrenceUpsertBulk) SetPriceStaff(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetPriceStaff(v)
	})
}

// AddPriceStaff adds v to the "price_staff" field.
func (u *OccurrenceUpsertBulk) AddPriceStaff(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddPriceStaff(v)
	})
}

// UpdatePriceStaff sets the "price_staff" field to the value that was provided on create.
func (u *OccurrenceUpsertBulk) UpdatePriceStaff() *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdatePriceStaff()
	})
}

// SetPriceGuest sets the "price_guest" field.
func (u *OccurrenceUpsertBulk) SetPriceGuest(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.SetPriceGuest(v)
	})
}

// AddPriceGuest adds v to the "price_guest" field.
func (u *OccurrenceUpsertBulk) AddPriceGuest(v int) *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.AddPriceGuest(v)
	})
}

// UpdatePriceGuest sets the "price_guest" field to the value that was provided on create.
func (u *OccurrenceUpsertBulk) UpdatePriceGuest() *OccurrenceUpsertBulk {
	return u.Update(func(s *OccurrenceUpsert) {
		s.UpdatePriceGuest()
	})
}

// Exec executes the query.
func (u *OccurrenceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OccurrenceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OccurrenceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OccurrenceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
