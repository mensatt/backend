// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mensatt/backend/internal/database/ent/image"
	"github.com/mensatt/backend/internal/database/ent/occurrence"
	"github.com/mensatt/backend/internal/database/ent/review"
)

// ReviewCreate is the builder for creating a Review entity.
type ReviewCreate struct {
	config
	mutation *ReviewMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDisplayName sets the "display_name" field.
func (rc *ReviewCreate) SetDisplayName(s string) *ReviewCreate {
	rc.mutation.SetDisplayName(s)
	return rc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableDisplayName(s *string) *ReviewCreate {
	if s != nil {
		rc.SetDisplayName(*s)
	}
	return rc
}

// SetStars sets the "stars" field.
func (rc *ReviewCreate) SetStars(i int) *ReviewCreate {
	rc.mutation.SetStars(i)
	return rc
}

// SetText sets the "text" field.
func (rc *ReviewCreate) SetText(s string) *ReviewCreate {
	rc.mutation.SetText(s)
	return rc
}

// SetNillableText sets the "text" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableText(s *string) *ReviewCreate {
	if s != nil {
		rc.SetText(*s)
	}
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReviewCreate) SetCreatedAt(t time.Time) *ReviewCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableCreatedAt(t *time.Time) *ReviewCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ReviewCreate) SetUpdatedAt(t time.Time) *ReviewCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableUpdatedAt(t *time.Time) *ReviewCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetAcceptedAt sets the "accepted_at" field.
func (rc *ReviewCreate) SetAcceptedAt(t time.Time) *ReviewCreate {
	rc.mutation.SetAcceptedAt(t)
	return rc
}

// SetNillableAcceptedAt sets the "accepted_at" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableAcceptedAt(t *time.Time) *ReviewCreate {
	if t != nil {
		rc.SetAcceptedAt(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ReviewCreate) SetID(u uuid.UUID) *ReviewCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableID(u *uuid.UUID) *ReviewCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// SetOccurrenceID sets the "occurrence" edge to the Occurrence entity by ID.
func (rc *ReviewCreate) SetOccurrenceID(id uuid.UUID) *ReviewCreate {
	rc.mutation.SetOccurrenceID(id)
	return rc
}

// SetOccurrence sets the "occurrence" edge to the Occurrence entity.
func (rc *ReviewCreate) SetOccurrence(o *Occurrence) *ReviewCreate {
	return rc.SetOccurrenceID(o.ID)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (rc *ReviewCreate) AddImageIDs(ids ...uuid.UUID) *ReviewCreate {
	rc.mutation.AddImageIDs(ids...)
	return rc
}

// AddImages adds the "images" edges to the Image entity.
func (rc *ReviewCreate) AddImages(i ...*Image) *ReviewCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return rc.AddImageIDs(ids...)
}

// Mutation returns the ReviewMutation object of the builder.
func (rc *ReviewCreate) Mutation() *ReviewMutation {
	return rc.mutation
}

// Save creates the Review in the database.
func (rc *ReviewCreate) Save(ctx context.Context) (*Review, error) {
	var (
		err  error
		node *Review
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Review)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ReviewMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReviewCreate) SaveX(ctx context.Context) *Review {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReviewCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReviewCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReviewCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := review.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := review.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := review.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReviewCreate) check() error {
	if v, ok := rc.mutation.DisplayName(); ok {
		if err := review.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "Review.display_name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Stars(); !ok {
		return &ValidationError{Name: "stars", err: errors.New(`ent: missing required field "Review.stars"`)}
	}
	if v, ok := rc.mutation.Stars(); ok {
		if err := review.StarsValidator(v); err != nil {
			return &ValidationError{Name: "stars", err: fmt.Errorf(`ent: validator failed for field "Review.stars": %w`, err)}
		}
	}
	if v, ok := rc.mutation.Text(); ok {
		if err := review.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Review.text": %w`, err)}
		}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Review.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Review.updated_at"`)}
	}
	if _, ok := rc.mutation.OccurrenceID(); !ok {
		return &ValidationError{Name: "occurrence", err: errors.New(`ent: missing required edge "Review.occurrence"`)}
	}
	return nil
}

func (rc *ReviewCreate) sqlSave(ctx context.Context) (*Review, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (rc *ReviewCreate) createSpec() (*Review, *sqlgraph.CreateSpec) {
	var (
		_node = &Review{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: review.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: review.FieldID,
			},
		}
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.DisplayName(); ok {
		_spec.SetField(review.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = &value
	}
	if value, ok := rc.mutation.Stars(); ok {
		_spec.SetField(review.FieldStars, field.TypeInt, value)
		_node.Stars = value
	}
	if value, ok := rc.mutation.Text(); ok {
		_spec.SetField(review.FieldText, field.TypeString, value)
		_node.Text = &value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(review.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(review.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.AcceptedAt(); ok {
		_spec.SetField(review.FieldAcceptedAt, field.TypeTime, value)
		_node.AcceptedAt = &value
	}
	if nodes := rc.mutation.OccurrenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   review.OccurrenceTable,
			Columns: []string{review.OccurrenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: occurrence.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.occurrence = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   review.ImagesTable,
			Columns: []string{review.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Review.Create().
//		SetDisplayName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReviewUpsert) {
//			SetDisplayName(v+v).
//		}).
//		Exec(ctx)
func (rc *ReviewCreate) OnConflict(opts ...sql.ConflictOption) *ReviewUpsertOne {
	rc.conflict = opts
	return &ReviewUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Review.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *ReviewCreate) OnConflictColumns(columns ...string) *ReviewUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &ReviewUpsertOne{
		create: rc,
	}
}

type (
	// ReviewUpsertOne is the builder for "upsert"-ing
	//  one Review node.
	ReviewUpsertOne struct {
		create *ReviewCreate
	}

	// ReviewUpsert is the "OnConflict" setter.
	ReviewUpsert struct {
		*sql.UpdateSet
	}
)

// SetDisplayName sets the "display_name" field.
func (u *ReviewUpsert) SetDisplayName(v string) *ReviewUpsert {
	u.Set(review.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateDisplayName() *ReviewUpsert {
	u.SetExcluded(review.FieldDisplayName)
	return u
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *ReviewUpsert) ClearDisplayName() *ReviewUpsert {
	u.SetNull(review.FieldDisplayName)
	return u
}

// SetStars sets the "stars" field.
func (u *ReviewUpsert) SetStars(v int) *ReviewUpsert {
	u.Set(review.FieldStars, v)
	return u
}

// UpdateStars sets the "stars" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateStars() *ReviewUpsert {
	u.SetExcluded(review.FieldStars)
	return u
}

// AddStars adds v to the "stars" field.
func (u *ReviewUpsert) AddStars(v int) *ReviewUpsert {
	u.Add(review.FieldStars, v)
	return u
}

// SetText sets the "text" field.
func (u *ReviewUpsert) SetText(v string) *ReviewUpsert {
	u.Set(review.FieldText, v)
	return u
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateText() *ReviewUpsert {
	u.SetExcluded(review.FieldText)
	return u
}

// ClearText clears the value of the "text" field.
func (u *ReviewUpsert) ClearText() *ReviewUpsert {
	u.SetNull(review.FieldText)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReviewUpsert) SetUpdatedAt(v time.Time) *ReviewUpsert {
	u.Set(review.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateUpdatedAt() *ReviewUpsert {
	u.SetExcluded(review.FieldUpdatedAt)
	return u
}

// SetAcceptedAt sets the "accepted_at" field.
func (u *ReviewUpsert) SetAcceptedAt(v time.Time) *ReviewUpsert {
	u.Set(review.FieldAcceptedAt, v)
	return u
}

// UpdateAcceptedAt sets the "accepted_at" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateAcceptedAt() *ReviewUpsert {
	u.SetExcluded(review.FieldAcceptedAt)
	return u
}

// ClearAcceptedAt clears the value of the "accepted_at" field.
func (u *ReviewUpsert) ClearAcceptedAt() *ReviewUpsert {
	u.SetNull(review.FieldAcceptedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Review.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(review.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReviewUpsertOne) UpdateNewValues() *ReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(review.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(review.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Review.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReviewUpsertOne) Ignore() *ReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReviewUpsertOne) DoNothing() *ReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReviewCreate.OnConflict
// documentation for more info.
func (u *ReviewUpsertOne) Update(set func(*ReviewUpsert)) *ReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReviewUpsert{UpdateSet: update})
	}))
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *ReviewUpsertOne) SetDisplayName(v string) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateDisplayName() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateDisplayName()
	})
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *ReviewUpsertOne) ClearDisplayName() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearDisplayName()
	})
}

// SetStars sets the "stars" field.
func (u *ReviewUpsertOne) SetStars(v int) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetStars(v)
	})
}

// AddStars adds v to the "stars" field.
func (u *ReviewUpsertOne) AddStars(v int) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.AddStars(v)
	})
}

// UpdateStars sets the "stars" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateStars() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateStars()
	})
}

// SetText sets the "text" field.
func (u *ReviewUpsertOne) SetText(v string) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateText() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateText()
	})
}

// ClearText clears the value of the "text" field.
func (u *ReviewUpsertOne) ClearText() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearText()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReviewUpsertOne) SetUpdatedAt(v time.Time) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateUpdatedAt() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAcceptedAt sets the "accepted_at" field.
func (u *ReviewUpsertOne) SetAcceptedAt(v time.Time) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetAcceptedAt(v)
	})
}

// UpdateAcceptedAt sets the "accepted_at" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateAcceptedAt() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateAcceptedAt()
	})
}

// ClearAcceptedAt clears the value of the "accepted_at" field.
func (u *ReviewUpsertOne) ClearAcceptedAt() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearAcceptedAt()
	})
}

// Exec executes the query.
func (u *ReviewUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReviewCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReviewUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReviewUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ReviewUpsertOne.ID is not supported by MySQL driver. Use ReviewUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReviewUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReviewCreateBulk is the builder for creating many Review entities in bulk.
type ReviewCreateBulk struct {
	config
	builders []*ReviewCreate
	conflict []sql.ConflictOption
}

// Save creates the Review entities in the database.
func (rcb *ReviewCreateBulk) Save(ctx context.Context) ([]*Review, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Review, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReviewCreateBulk) SaveX(ctx context.Context) []*Review {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReviewCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReviewCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Review.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReviewUpsert) {
//			SetDisplayName(v+v).
//		}).
//		Exec(ctx)
func (rcb *ReviewCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReviewUpsertBulk {
	rcb.conflict = opts
	return &ReviewUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Review.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *ReviewCreateBulk) OnConflictColumns(columns ...string) *ReviewUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &ReviewUpsertBulk{
		create: rcb,
	}
}

// ReviewUpsertBulk is the builder for "upsert"-ing
// a bulk of Review nodes.
type ReviewUpsertBulk struct {
	create *ReviewCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Review.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(review.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReviewUpsertBulk) UpdateNewValues() *ReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(review.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(review.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Review.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReviewUpsertBulk) Ignore() *ReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReviewUpsertBulk) DoNothing() *ReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReviewCreateBulk.OnConflict
// documentation for more info.
func (u *ReviewUpsertBulk) Update(set func(*ReviewUpsert)) *ReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReviewUpsert{UpdateSet: update})
	}))
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *ReviewUpsertBulk) SetDisplayName(v string) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateDisplayName() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateDisplayName()
	})
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *ReviewUpsertBulk) ClearDisplayName() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearDisplayName()
	})
}

// SetStars sets the "stars" field.
func (u *ReviewUpsertBulk) SetStars(v int) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetStars(v)
	})
}

// AddStars adds v to the "stars" field.
func (u *ReviewUpsertBulk) AddStars(v int) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.AddStars(v)
	})
}

// UpdateStars sets the "stars" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateStars() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateStars()
	})
}

// SetText sets the "text" field.
func (u *ReviewUpsertBulk) SetText(v string) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateText() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateText()
	})
}

// ClearText clears the value of the "text" field.
func (u *ReviewUpsertBulk) ClearText() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearText()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReviewUpsertBulk) SetUpdatedAt(v time.Time) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateUpdatedAt() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAcceptedAt sets the "accepted_at" field.
func (u *ReviewUpsertBulk) SetAcceptedAt(v time.Time) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetAcceptedAt(v)
	})
}

// UpdateAcceptedAt sets the "accepted_at" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateAcceptedAt() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateAcceptedAt()
	})
}

// ClearAcceptedAt clears the value of the "accepted_at" field.
func (u *ReviewUpsertBulk) ClearAcceptedAt() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearAcceptedAt()
	})
}

// Exec executes the query.
func (u *ReviewUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReviewCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReviewCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReviewUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
