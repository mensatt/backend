// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DishesColumns holds the columns for the "dishes" table.
	DishesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name_de", Type: field.TypeString, Unique: true},
		{Name: "name_en", Type: field.TypeString},
		{Name: "occurrence_side_dishes", Type: field.TypeUUID, Nullable: true},
	}
	// DishesTable holds the schema information for the "dishes" table.
	DishesTable = &schema.Table{
		Name:       "dishes",
		Columns:    DishesColumns,
		PrimaryKey: []*schema.Column{DishesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dishes_occurrences_side_dishes",
				Columns:    []*schema.Column{DishesColumns[3]},
				RefColumns: []*schema.Column{OccurrencesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DishAliasColumns holds the columns for the "dish_alias" table.
	DishAliasColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "alias_name", Type: field.TypeString, Unique: true},
		{Name: "normalized_alias_name", Type: field.TypeString},
		{Name: "dish_aliases", Type: field.TypeUUID, Nullable: true},
		{Name: "dish_alias_dish", Type: field.TypeUUID, Nullable: true},
	}
	// DishAliasTable holds the schema information for the "dish_alias" table.
	DishAliasTable = &schema.Table{
		Name:       "dish_alias",
		Columns:    DishAliasColumns,
		PrimaryKey: []*schema.Column{DishAliasColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dish_alias_dishes_aliases",
				Columns:    []*schema.Column{DishAliasColumns[3]},
				RefColumns: []*schema.Column{DishesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "dish_alias_dishes_dish",
				Columns:    []*schema.Column{DishAliasColumns[4]},
				RefColumns: []*schema.Column{DishesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ImagesColumns holds the columns for the "images" table.
	ImagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "image_hash", Type: field.TypeString},
		{Name: "review_images", Type: field.TypeUUID, Nullable: true},
	}
	// ImagesTable holds the schema information for the "images" table.
	ImagesTable = &schema.Table{
		Name:       "images",
		Columns:    ImagesColumns,
		PrimaryKey: []*schema.Column{ImagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "images_reviews_images",
				Columns:    []*schema.Column{ImagesColumns[2]},
				RefColumns: []*schema.Column{ReviewsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// LocationsColumns holds the columns for the "locations" table.
	LocationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "external_id", Type: field.TypeInt, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// LocationsTable holds the schema information for the "locations" table.
	LocationsTable = &schema.Table{
		Name:       "locations",
		Columns:    LocationsColumns,
		PrimaryKey: []*schema.Column{LocationsColumns[0]},
	}
	// OccurrencesColumns holds the columns for the "occurrences" table.
	OccurrencesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "date", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"CONFIRMED", "APPROVED", "AWAITING_APPROVAL", "UPDATED", "PENDING_DELETION"}, Default: "AWAITING_APPROVAL"},
		{Name: "kj", Type: field.TypeInt},
		{Name: "kcal", Type: field.TypeInt},
		{Name: "fat", Type: field.TypeInt},
		{Name: "saturated_fat", Type: field.TypeInt},
		{Name: "carbohydrates", Type: field.TypeInt},
		{Name: "sugar", Type: field.TypeInt},
		{Name: "fiber", Type: field.TypeInt},
		{Name: "protein", Type: field.TypeInt},
		{Name: "salt", Type: field.TypeInt},
		{Name: "price_student", Type: field.TypeInt},
		{Name: "price_staff", Type: field.TypeInt},
		{Name: "price_guest", Type: field.TypeInt},
		{Name: "dish_occurrences", Type: field.TypeUUID, Nullable: true},
		{Name: "occurrence_location", Type: field.TypeUUID, Nullable: true},
		{Name: "occurrence_dish", Type: field.TypeUUID, Nullable: true},
		{Name: "review_occurrence", Type: field.TypeUUID, Nullable: true},
	}
	// OccurrencesTable holds the schema information for the "occurrences" table.
	OccurrencesTable = &schema.Table{
		Name:       "occurrences",
		Columns:    OccurrencesColumns,
		PrimaryKey: []*schema.Column{OccurrencesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "occurrences_dishes_occurrences",
				Columns:    []*schema.Column{OccurrencesColumns[15]},
				RefColumns: []*schema.Column{DishesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "occurrences_locations_location",
				Columns:    []*schema.Column{OccurrencesColumns[16]},
				RefColumns: []*schema.Column{LocationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "occurrences_dishes_dish",
				Columns:    []*schema.Column{OccurrencesColumns[17]},
				RefColumns: []*schema.Column{DishesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "occurrences_reviews_occurrence",
				Columns:    []*schema.Column{OccurrencesColumns[18]},
				RefColumns: []*schema.Column{ReviewsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ReviewsColumns holds the columns for the "reviews" table.
	ReviewsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "display_name", Type: field.TypeString, Size: 32},
		{Name: "stars", Type: field.TypeInt},
		{Name: "text", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "accepted_at", Type: field.TypeTime, Nullable: true},
	}
	// ReviewsTable holds the schema information for the "reviews" table.
	ReviewsTable = &schema.Table{
		Name:       "reviews",
		Columns:    ReviewsColumns,
		PrimaryKey: []*schema.Column{ReviewsColumns[0]},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "key", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "short_name", Type: field.TypeString, Nullable: true},
		{Name: "priority", Type: field.TypeEnum, Enums: []string{"HIDE", "LOW", "MEDIUM", "HIGH"}, Default: "HIDE"},
		{Name: "is_allergy", Type: field.TypeBool, Default: false},
		{Name: "occurrence_tags", Type: field.TypeUUID, Nullable: true},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:       "tags",
		Columns:    TagsColumns,
		PrimaryKey: []*schema.Column{TagsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tags_occurrences_tags",
				Columns:    []*schema.Column{TagsColumns[7]},
				RefColumns: []*schema.Column{OccurrencesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DishesTable,
		DishAliasTable,
		ImagesTable,
		LocationsTable,
		OccurrencesTable,
		ReviewsTable,
		TagsTable,
		UsersTable,
	}
)

func init() {
	DishesTable.ForeignKeys[0].RefTable = OccurrencesTable
	DishAliasTable.ForeignKeys[0].RefTable = DishesTable
	DishAliasTable.ForeignKeys[1].RefTable = DishesTable
	ImagesTable.ForeignKeys[0].RefTable = ReviewsTable
	OccurrencesTable.ForeignKeys[0].RefTable = DishesTable
	OccurrencesTable.ForeignKeys[1].RefTable = LocationsTable
	OccurrencesTable.ForeignKeys[2].RefTable = DishesTable
	OccurrencesTable.ForeignKeys[3].RefTable = ReviewsTable
	TagsTable.ForeignKeys[0].RefTable = OccurrencesTable
}
