// Code generated by ent, DO NOT EDIT.

package image

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the image type in the database.
	Label = "image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldImageHash holds the string denoting the image_hash field in the database.
	FieldImageHash = "image_hash"
	// EdgeReview holds the string denoting the review edge name in mutations.
	EdgeReview = "review"
	// Table holds the table name of the image in the database.
	Table = "image"
	// ReviewTable is the table that holds the review relation/edge.
	ReviewTable = "image"
	// ReviewInverseTable is the table name for the Review entity.
	// It exists in this package in order to avoid circular dependency with the "review" package.
	ReviewInverseTable = "review"
	// ReviewColumn is the table column denoting the review relation/edge.
	ReviewColumn = "review"
)

// Columns holds all SQL columns for image fields.
var Columns = []string{
	FieldID,
	FieldImageHash,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "image"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"review",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ImageHashValidator is a validator for the "image_hash" field. It is called by the builders before save.
	ImageHashValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Image queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByImageHash orders the results by the image_hash field.
func ByImageHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageHash, opts...).ToFunc()
}

// ByReviewField orders the results by review field.
func ByReviewField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReviewStep(), sql.OrderByField(field, opts...))
	}
}
func newReviewStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReviewInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReviewTable, ReviewColumn),
	)
}
