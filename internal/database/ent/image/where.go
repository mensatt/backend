// Code generated by ent, DO NOT EDIT.

package image

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/mensatt/backend/internal/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ImageHash applies equality check predicate on the "image_hash" field. It's identical to ImageHashEQ.
func ImageHash(v string) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageHash), v))
	})
}

// ImageHashEQ applies the EQ predicate on the "image_hash" field.
func ImageHashEQ(v string) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageHash), v))
	})
}

// ImageHashNEQ applies the NEQ predicate on the "image_hash" field.
func ImageHashNEQ(v string) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImageHash), v))
	})
}

// ImageHashIn applies the In predicate on the "image_hash" field.
func ImageHashIn(vs ...string) predicate.Image {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldImageHash), v...))
	})
}

// ImageHashNotIn applies the NotIn predicate on the "image_hash" field.
func ImageHashNotIn(vs ...string) predicate.Image {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldImageHash), v...))
	})
}

// ImageHashGT applies the GT predicate on the "image_hash" field.
func ImageHashGT(v string) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImageHash), v))
	})
}

// ImageHashGTE applies the GTE predicate on the "image_hash" field.
func ImageHashGTE(v string) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImageHash), v))
	})
}

// ImageHashLT applies the LT predicate on the "image_hash" field.
func ImageHashLT(v string) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImageHash), v))
	})
}

// ImageHashLTE applies the LTE predicate on the "image_hash" field.
func ImageHashLTE(v string) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImageHash), v))
	})
}

// ImageHashContains applies the Contains predicate on the "image_hash" field.
func ImageHashContains(v string) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImageHash), v))
	})
}

// ImageHashHasPrefix applies the HasPrefix predicate on the "image_hash" field.
func ImageHashHasPrefix(v string) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImageHash), v))
	})
}

// ImageHashHasSuffix applies the HasSuffix predicate on the "image_hash" field.
func ImageHashHasSuffix(v string) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImageHash), v))
	})
}

// ImageHashEqualFold applies the EqualFold predicate on the "image_hash" field.
func ImageHashEqualFold(v string) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImageHash), v))
	})
}

// ImageHashContainsFold applies the ContainsFold predicate on the "image_hash" field.
func ImageHashContainsFold(v string) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImageHash), v))
	})
}

// HasReview applies the HasEdge predicate on the "review" edge.
func HasReview() predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReviewTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReviewTable, ReviewColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReviewWith applies the HasEdge predicate on the "review" edge with a given conditions (other predicates).
func HasReviewWith(preds ...predicate.Review) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReviewInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReviewTable, ReviewColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Image) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Image) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Image) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		p(s.Not())
	})
}
